[{"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\index.js":"1","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\App.js":"2","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\providers\\index.js":"3","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\index.js":"4","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\index.js":"5","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\TermsOfServices.jsx":"6","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\PrivacyPolicy.jsx":"7","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\LoginForm\\LoginForm.jsx":"8","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\Header\\Header.jsx":"9","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\Notifier\\Notifier.jsx":"10","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\Table\\Table.jsx":"11","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\SearchBox\\SearchBox.jsx":"12","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\DeleteBox\\DeleteBox.jsx":"13","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Stats\\Stats.jsx":"14","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Users\\Users.jsx":"15","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Articles\\Articles.jsx":"16","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\DataBox\\DataBox.jsx":"17","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ImageExercises\\ImageExercises.jsx":"18","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\VideoExercises\\VideoExercises.jsx":"19","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\MapBox\\MapBox.jsx":"20","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Products\\Products.jsx":"21","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ProductsCategory\\ProductsCategory.jsx":"22","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ImageExercisesCategory\\ImageExercisesCategory.jsx":"23","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\VideoExercisesCategory\\VideoExercisesCategory.jsx":"24","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Orders\\Orders.jsx":"25","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Halls\\Halls.jsx":"26","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\PaymentMethods\\PaymentMethods.jsx":"27","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Proteins\\Proteins.jsx":"28","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Advertisements\\Advertisements.jsx":"29","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Home\\Home.jsx":"30","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Login\\Login.jsx":"31","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ProteinCategory\\ProteinCategory.jsx":"32","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Nutritions\\Nutritions.jsx":"33","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\config.js":"34","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Users\\hooks\\index.js":"35","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Articles\\hooks\\index.js":"36","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Advertisements\\hooks\\index.js":"37","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Proteins\\hooks\\index.js":"38","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\PaymentMethods\\hooks\\index.js":"39","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Halls\\hooks\\index.js":"40","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Orders\\hooks\\index.js":"41","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\VideoExercisesCategory\\hooks\\index.js":"42","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ImageExercisesCategory\\hooks\\index.js":"43","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ProductsCategory\\hooks\\index.js":"44","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Products\\hooks\\index.js":"45","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\VideoExercises\\hooks\\index.js":"46","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ProteinCategory\\hooks\\index.js":"47","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ImageExercises\\hooks\\index.js":"48","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Nutritions\\hooks\\index.js":"49","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\MapSearchBox\\MapSearchBox.jsx":"50","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Diets\\Diets.jsx":"51","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Diets\\hooks\\index.js":"52","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Barcodes\\Barcodes.jsx":"53","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Barcodes\\hooks\\index.js":"54","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Notifications\\Notifications.jsx":"55","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Notifications\\hooks\\index.js":"56","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Questions\\Questions.jsx":"57","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Questions\\hooks\\index.js":"58","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\HomeExercicesCategories\\HomeExercisesCategory.jsx":"59","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\HomeExercicesCategories\\hooks\\index.js":"60","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\HomeExercices\\HomeExercises.jsx":"61","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\HomeExercices\\hooks\\index.js":"62","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\Table\\QuestionTable.js":"63"},{"size":455,"mtime":1619025336000,"results":"64","hashOfConfig":"65"},{"size":3349,"mtime":1631749176288,"results":"66","hashOfConfig":"65"},{"size":1807,"mtime":1619025336000,"results":"67","hashOfConfig":"65"},{"size":457,"mtime":1631829090338,"results":"68","hashOfConfig":"65"},{"size":1775,"mtime":1631749172597,"results":"69","hashOfConfig":"65"},{"size":7591,"mtime":1619025336000,"results":"70","hashOfConfig":"65"},{"size":7584,"mtime":1619025336000,"results":"71","hashOfConfig":"65"},{"size":2453,"mtime":1619025336000,"results":"72","hashOfConfig":"65"},{"size":16067,"mtime":1631749277026,"results":"73","hashOfConfig":"65"},{"size":985,"mtime":1619025336000,"results":"74","hashOfConfig":"65"},{"size":3549,"mtime":1631829191255,"results":"75","hashOfConfig":"65"},{"size":1030,"mtime":1619025336000,"results":"76","hashOfConfig":"65"},{"size":1397,"mtime":1619025336000,"results":"77","hashOfConfig":"65"},{"size":4010,"mtime":1629739974371,"results":"78","hashOfConfig":"65"},{"size":9153,"mtime":1621115330000,"results":"79","hashOfConfig":"65"},{"size":7138,"mtime":1629660941039,"results":"80","hashOfConfig":"65"},{"size":7757,"mtime":1621180477000,"results":"81","hashOfConfig":"65"},{"size":8998,"mtime":1621115330000,"results":"82","hashOfConfig":"65"},{"size":8964,"mtime":1621115330000,"results":"83","hashOfConfig":"65"},{"size":1070,"mtime":1621180477000,"results":"84","hashOfConfig":"65"},{"size":9776,"mtime":1621115330000,"results":"85","hashOfConfig":"65"},{"size":6185,"mtime":1621115330000,"results":"86","hashOfConfig":"65"},{"size":6173,"mtime":1631743104475,"results":"87","hashOfConfig":"65"},{"size":6175,"mtime":1621115330000,"results":"88","hashOfConfig":"65"},{"size":6603,"mtime":1630161768898,"results":"89","hashOfConfig":"65"},{"size":11740,"mtime":1629641472646,"results":"90","hashOfConfig":"65"},{"size":6904,"mtime":1621115330000,"results":"91","hashOfConfig":"65"},{"size":8112,"mtime":1621974037000,"results":"92","hashOfConfig":"65"},{"size":6097,"mtime":1621974037000,"results":"93","hashOfConfig":"65"},{"size":291,"mtime":1630200856408,"results":"94","hashOfConfig":"65"},{"size":514,"mtime":1621115330000,"results":"95","hashOfConfig":"65"},{"size":6063,"mtime":1621974037000,"results":"96","hashOfConfig":"65"},{"size":9570,"mtime":1621115330000,"results":"97","hashOfConfig":"65"},{"size":159,"mtime":1629600415643,"results":"98","hashOfConfig":"65"},{"size":1888,"mtime":1619025336000,"results":"99","hashOfConfig":"65"},{"size":2115,"mtime":1619025336000,"results":"100","hashOfConfig":"65"},{"size":2181,"mtime":1620498248000,"results":"101","hashOfConfig":"65"},{"size":2493,"mtime":1621974037000,"results":"102","hashOfConfig":"65"},{"size":2323,"mtime":1619025336000,"results":"103","hashOfConfig":"65"},{"size":2775,"mtime":1629645723499,"results":"104","hashOfConfig":"65"},{"size":2073,"mtime":1619025336000,"results":"105","hashOfConfig":"65"},{"size":2197,"mtime":1620492666000,"results":"106","hashOfConfig":"65"},{"size":2197,"mtime":1620492666000,"results":"107","hashOfConfig":"65"},{"size":2169,"mtime":1619972686000,"results":"108","hashOfConfig":"65"},{"size":2446,"mtime":1619972686000,"results":"109","hashOfConfig":"65"},{"size":2683,"mtime":1620492666000,"results":"110","hashOfConfig":"65"},{"size":2130,"mtime":1621974037000,"results":"111","hashOfConfig":"65"},{"size":2707,"mtime":1620492666000,"results":"112","hashOfConfig":"65"},{"size":2298,"mtime":1620596637000,"results":"113","hashOfConfig":"65"},{"size":940,"mtime":1621180477000,"results":"114","hashOfConfig":"65"},{"size":9245,"mtime":1629649391243,"results":"115","hashOfConfig":"65"},{"size":2839,"mtime":1629652804242,"results":"116","hashOfConfig":"65"},{"size":13605,"mtime":1630185831413,"results":"117","hashOfConfig":"65"},{"size":2204,"mtime":1629668448494,"results":"118","hashOfConfig":"65"},{"size":7309,"mtime":1630201140615,"results":"119","hashOfConfig":"65"},{"size":2266,"mtime":1630202767602,"results":"120","hashOfConfig":"65"},{"size":4715,"mtime":1631830846982,"results":"121","hashOfConfig":"65"},{"size":1562,"mtime":1631830800653,"results":"122","hashOfConfig":"65"},{"size":6199,"mtime":1631744253220,"results":"123","hashOfConfig":"65"},{"size":2263,"mtime":1631746493104,"results":"124","hashOfConfig":"65"},{"size":8986,"mtime":1631750090257,"results":"125","hashOfConfig":"65"},{"size":2748,"mtime":1631752294654,"results":"126","hashOfConfig":"65"},{"size":3672,"mtime":1631829622328,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"1pdpgm1",{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"130"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"130"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"130"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"130"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"130"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"130"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"130"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"130"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"130"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"130"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"130"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"130"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"130"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"130"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"130"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"130"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"130"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"130"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"130"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"130"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"130"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"130"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"130"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"130"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\index.js",[],["286","287"],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\App.js",["288","289"],"import {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { useAuthContext, useNotifierContext } from \"./providers\";\n\n//Style\nimport \"./style.scss\";\n\n//Screens\nimport {\n  Login,\n  Stats,\n  Users,\n  Articles,\n  ImageExercises,\n  VideoExercises,\n  Halls,\n  Products,\n  Orders,\n  Proteins,\n  PaymentMethods,\n  TermsOfServices,\n  PrivacyPolicy,\n  ProductsCategory,\n  ImageExercisesCategory,\n  VideoExercisesCategory,\n  Advertisements,\n  Nutritions,\n  Home,\n  ProteinCategory,\n  Diets,\n  Barcodes,\n  Notifications,\n  Questions,\n  HomeExercisesCategory,\n  HomeExercises,\n} from \"./screens\";\n\n//Components\nimport { Notifier, Header } from \"./components\";\n\nconst App = () => {\n  const { isLoggedIn } = useAuthContext();\n  const { isNotifierVisible } = useNotifierContext();\n\n  return (\n    <div className=\"App\">\n      {isNotifierVisible && <Notifier />}\n      <Router>\n        {isLoggedIn ? (\n          <>\n            <Header />\n            <Switch>\n              <Route path=\"/admin/stats\" component={Stats} />\n              <Route path=\"/admin/users\" component={Users} />\n              <Route path=\"/admin/articles\" component={Articles} />\n              <Route path=\"/admin/diets\" component={Diets} />\n              <Route path=\"/admin/questions\" component={Questions} />\n              <Route\n                path=\"/admin/home-exercises-category\"\n                component={HomeExercisesCategory}\n              />\n\n              <Route path=\"/admin/home-exercises\" component={HomeExercises} />\n              <Route path=\"/admin/notifications\" component={Notifications} />\n              <Route path=\"/admin/barcodes\" component={Barcodes} />\n              <Route path=\"/admin/image-exercises\" component={ImageExercises} />\n              <Route path=\"/admin/video-exercises\" component={VideoExercises} />\n              <Route path=\"/admin/halls\" component={Halls} />\n              <Route path=\"/admin/products\" component={Products} />\n              <Route\n                path=\"/admin/products-category\"\n                component={ProductsCategory}\n              />\n              <Route\n                path=\"/admin/image-exercises-category\"\n                component={ImageExercisesCategory}\n              />\n              {/*<Route path=\"/admin/video-exercises-category\" component={VideoExercisesCategory} />*/}\n              <Route path=\"/admin/orders\" component={Orders} />\n              <Route path=\"/admin/proteins\" component={Proteins} />\n              <Route path=\"/admin/payment-methods\" component={PaymentMethods} />\n              <Route path=\"/admin/advertisements\" component={Advertisements} />\n              <Route path=\"/admin/nutritions\" component={Nutritions} />\n              <Route\n                path=\"/admin/protein-category\"\n                component={ProteinCategory}\n              />\n              <Redirect to=\"/admin/stats\" />\n            </Switch>\n          </>\n        ) : (\n          <Switch>\n            {/* <Route exact path=\"/\" component={Home} /> */}\n            <Route path=\"/dash-log\" component={Login} />\n            <Route path=\"/terms-of-services\" component={TermsOfServices} />\n            <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n            <Redirect to=\"/dash-log\" />\n          </Switch>\n        )}\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\providers\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\TermsOfServices.jsx",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\PrivacyPolicy.jsx",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\LoginForm\\LoginForm.jsx",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\Notifier\\Notifier.jsx",["290"],"import { useEffect, useRef } from \"react\";\nimport { useNotifierContext } from \"../../providers\";\n\nconst Notifier = () => {\n  const { notifiers, setIsNotifierVisible } = useNotifierContext();\n\n  const alarmsRef = useRef(null);\n\n  useEffect(() => {\n    window.onload = (e) => {\n      if (alarmsRef.current) {\n        alarmsRef.current.style.top = window.pageYOffset + 20 + \"px\";\n        window.addEventListener(\"scroll\", (e) => {\n          alarmsRef.current.style.top = window.pageYOffset + 20 + \"px\";\n        });\n      }\n    };\n  }, []);\n  return (\n    <div className=\"alarms\" ref={alarmsRef}>\n      {notifiers.errors &&\n        notifiers.errors.map((err, i) => (\n          <div key={i} className=\"alarm alarm-errors\">\n            {err}\n          </div>\n        ))}\n      {notifiers.success &&\n        notifiers.success.map((suc, i) => (\n          <div key={i} className=\"alarm alarm-success\">\n            {suc}\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Notifier;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\Table\\Table.jsx",["291","292","293","294","295","296","297","298","299"],"import { useEffect, useState } from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport SwiperCore, { Pagination, A11y } from \"swiper\";\nimport {url} from \"../../config\";\n//Style\nimport \"./style.scss\";\nimport \"swiper/swiper.scss\";\nimport \"swiper/components/navigation/navigation.scss\";\nimport \"swiper/components/pagination/pagination.scss\";\nimport \"swiper/components/scrollbar/scrollbar.scss\";\n\n//Assets\n//@ts-ignore\nimport TrashIcon from \"../../assets/img/trash.svg\";\n\nSwiperCore.use([Pagination, A11y]);\n\nconst Table = ({ headers, data, actions }) => {\n  return (\n    <div className=\"table-container\">\n      <div className=\"table\">\n        <table>\n          <thead>\n            <tr>\n              {headers && headers.map((head, i) => <th key={i}>{head}</th>)}\n              {actions && <th>الإجراء</th>}\n            </tr>\n          </thead>\n          <tbody>\n            {data &&\n              data.length !== 0 &&\n              data.map((inputs, i) => (\n                <tr key={i}>\n                  {inputs &&\n                    inputs.map((input) => (\n                      <td>\n                        {input && input.type == \"img\" ? (\n                          <img src={input.src} className=\"main-img\" />\n                        ) : input && input.type == \"slider\" ? (\n                          <Swiper\n                            spaceBetween={0}\n                            slidesPerView={1}\n                            pagination={{ clickable: true }}\n                          >\n                            {input.images.map((img) => (\n                              <SwiperSlide style={{ width: 160 }}>\n                                <img src={img} className=\"slider-img\" />\n                              </SwiperSlide>\n                            ))}\n                          </Swiper>\n                        ) : input && input.type == \"location\" ? (\n                          <button\n                            className=\"maps-btn\"\n                            onClick={input.onClick && input.onClick}\n                          >\n                            عرض الخريطة\n                          </button>\n                        ) : input && input.type == \"video\" ? (\n                          <iframe\n                            className=\"video-frame\"\n                            src={`\n                              ${url}/play-youtube?videoId=${input.videoId}`}\n                          ></iframe>\n                        ) : (\n                          input\n                        )}\n                      </td>\n                    ))}\n                  {actions && (\n                    <td className=\"action\">\n                      {actions.edit && (\n                        <button\n                          onClick={() => actions.edit(inputs[0])}\n                          className=\"btn-edit\"\n                        >\n                        تعديل\n                        </button>\n                      )}\n                      {actions.delete && (\n                        <img\n                          onClick={() => actions.delete(inputs[0])}\n                          src={TrashIcon}\n                          alt=\"حذف\"\n                          title=\"حذف\"\n                        />\n                      )}\n                    </td>\n                  )}\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n      <div className=\"pagination\" data-update-function=\"searchForUsers\"></div>\n    </div>\n  );\n};\n\nexport default Table;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\SearchBox\\SearchBox.jsx",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\DeleteBox\\DeleteBox.jsx",["300"],"import { useRef, useEffect } from \"react\";\n\n//Style\nimport \"./style.scss\";\n\nconst DeleteBox = ({ visible, setVisible, title, onDelete }) => {\n  const deleteBoxRef = useRef(null);\n\n  useEffect(() => {\n    window.addEventListener(\"mouseup\", containerHandler);\n  }, []);\n\n  const containerHandler = (e) => {\n    e.preventDefault();\n\n    if (deleteBoxRef.current && !deleteBoxRef.current.contains(e.target)) {\n      setVisible(false);\n    }\n  };\n\n  return (\n    visible && (\n      <div className=\"float-box-container\">\n        <div className=\"delete-box\" ref={deleteBoxRef}>\n          <div className=\"closing\" onClick={() => setVisible(false)}>\n            <span></span>\n            <span></span>\n          </div>\n          <form method=\"POST\" onSubmit={(e) => e.preventDefault()}>\n            <input type=\"hidden\" name=\"id\" />\n            <h3>{title}</h3>\n            <div className=\"input-items\">\n              <div className=\"input-item\">\n                <button className=\"delete-btn\" type=\"submit\" onClick={onDelete}>\n                  حذف\n                </button>\n              </div>\n              <div className=\"input-item\">\n                <button className=\"abort-btn\" onClick={() => setVisible(false)}>\n                  الغاء\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default DeleteBox;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Stats\\Stats.jsx",["301"],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNotifierContext } from \"../../providers\";\n\n//Styles\nimport \"./style.scss\";\nimport { Helmet } from \"react-helmet\";\n\nconst Stats = () => {\n  const { setNotifiers } = useNotifierContext();\n\n  const [stats, setStats] = useState({\n    halls: 0,\n    articles: 0,\n    imageExercises: 0,\n    videoExercises: 0,\n    products: 0,\n    orders: 0,\n    users: 0,\n    proteins: 0,\n    diets:0\n  });\n\n  useEffect(() => {\n    (async () => {\n      await getStats();\n    })();\n  }, []);\n\n  const getStats = async () => {\n    try {\n      let response = await axios.post(\"/api/stats/all\");\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n      }\n\n      setStats({ ...stats, ...data.stats });\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / الإحصائيات</title>\n      </Helmet>\n      {/* <Header /> */}\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>الإحصائيات</h6>\n        </div>\n\n        <div className=\"stats\">\n          <div className=\"head\">\n            <h3>الإحصائيات</h3>\n          </div>\n          <div className=\"boxs\">\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.users}</div>\n                <div className=\"title\">المستخدمين</div>\n              </div>\n            </div>\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.articles}</div>\n                <div className=\"title\">المقالات</div>\n              </div>\n            </div>\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.diets}</div>\n                <div className=\"title\">اكلات دايت</div>\n              </div>\n            </div>\n\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.barcodes}</div>\n                <div className=\"title\"> البحث عن طريق الباركود</div>\n              </div>\n            </div>\n\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.videoExercises}</div>\n                <div className=\"title\">التمارين الجاهزة (فيديو)</div>\n              </div>\n            </div>\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.imageExercises}</div>\n                <div className=\"title\">التمارين الرياضية (صور)</div>\n              </div>\n            </div>\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.proteins}</div>\n                <div className=\"title\">المكملات الغذائية</div>\n              </div>\n            </div>\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.halls}</div>\n                <div className=\"title\">الصالات الرياضية</div>\n              </div>\n            </div>\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.orders}</div>\n                <div className=\"title\">الطلبات</div>\n              </div>\n            </div>\n            <div className=\"stats-box\">\n              <div className=\"item\">\n                <div className=\"num\">{stats.products}</div>\n                <div className=\"title\">المنتجات</div>\n              </div>\n            </div>\n          </div>\n          {/* <span className=\"line\"></span> */}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Stats;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Users\\Users.jsx",["302","303"],"import { useState, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useUsersHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Users = () => {\n  const { getUsers, deleteUser, addUser, editUser } = useUsersHook();\n\n  const [users, setUsers] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [userObj, setUserObj] = useState({\n    _id: 0,\n    phoneNumber: \"\",\n    username: \"\",\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConfirm: \"\",\n    role: \"\",\n  });\n\n  useEffect(() => {\n    (async () => {\n      setUsers(await getUsers());\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setUserObj({\n        _id: 0,\n        phoneNumber: \"\",\n        username: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        passwordConfirm: \"\",\n        role: \"\",\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const user = users.find((u) => u._id === _id);\n    delete user.password;\n    delete user.passwordConfirm;\n    setUserObj(user);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setUserObj(users.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / المستخدمين</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف المستخدم رقم ${userObj._id}`}\n        onDelete={async () => {\n          if (await deleteUser(userObj._id)) {\n            setUsers(users.filter((u) => u._id !== userObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة مستخدم جديد\",\n          onSave: async () => {\n            const user = await addUser(userObj);\n            if (user) {\n              setUsers([...users, user]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"رقم الهاتف\",\n            props: {\n              type: \"text\",\n              placeholder: \"رقم الهاتف\",\n              onChange: (e) =>\n                setUserObj({ ...userObj, phoneNumber: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"البريد الالكتروني\",\n            props: {\n              type: \"email\",\n              placeholder: \"البريد الالكتروني\",\n              onChange: (e) =>\n                setUserObj({ ...userObj, email: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"اسم المستخدم\",\n            props: {\n              type: \"text\",\n              placeholder: \"اسم المستخدم\",\n              onChange: (e) =>\n                setUserObj({ ...userObj, username: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الاسم\",\n            props: {\n              type: \"text\",\n              placeholder: \"الاسم\",\n              onChange: (e) => setUserObj({ ...userObj, name: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"كلمة المرور\",\n            props: {\n              type: \"password\",\n              placeholder: \"كلمة المرور\",\n              onChange: (e) =>\n                setUserObj({ ...userObj, password: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"تأكيد كلمة المرور\",\n            props: {\n              type: \"password\",\n              placeholder: \"تأكيد كلمة المرور\",\n              onChange: (e) =>\n                setUserObj({ ...userObj, passwordConfirm: e.target.value }),\n            },\n          },\n          {\n            tag: \"select\",\n            props: {\n              onChange: (e) => setUserObj({ ...userObj, role: e.target.value }),\n            },\n            options: [\n              {\n                label: \"المستوي\",\n                value: \"\",\n              },\n              {\n                label: \"مدير\",\n                value: \"admin\",\n              },\n              {\n                label: \"مستخدم\",\n                value: \"user\",\n              },\n            ],\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل المستخدم رقم ${userObj._id}`,\n          onSave: async () => {\n            const user = await editUser(userObj);\n            if (user) {\n              setUsers(users.map((u) => (u._id === user._id ? user : u)));\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"رقم الهاتف\",\n            props: {\n              type: \"text\",\n              placeholder: \"رقم الهاتف\",\n              value: userObj.phoneNumber,\n              onChange: (e) =>\n                setUserObj({ ...userObj, phoneNumber: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"البريد الالكتروني\",\n            props: {\n              type: \"email\",\n              placeholder: \"البريد الالكتروني\",\n              value: userObj.email,\n              onChange: (e) =>\n                setUserObj({ ...userObj, email: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"اسم المستخدم\",\n            props: {\n              type: \"text\",\n              placeholder: \"اسم المستخدم\",\n              value: userObj.username,\n              onChange: (e) =>\n                setUserObj({ ...userObj, username: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الاسم\",\n            props: {\n              type: \"text\",\n              placeholder: \"الاسم\",\n              value: userObj.name,\n              onChange: (e) => setUserObj({ ...userObj, name: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"كلمة المرور\",\n            props: {\n              type: \"password\",\n              placeholder: \"كلمة المرور\",\n              onChange: (e) =>\n                setUserObj({ ...userObj, password: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"تأكيد كلمة المرور\",\n            props: {\n              type: \"password\",\n              placeholder: \"تأكيد كلمة المرور\",\n              onChange: (e) =>\n                setUserObj({ ...userObj, passwordConfirm: e.target.value }),\n            },\n          },\n          {\n            tag: \"select\",\n            props: {\n              value: userObj.role,\n              onChange: (e) => setUserObj({ ...userObj, role: e.target.value }),\n            },\n            options: [\n              {\n                label: \"المستوي\",\n                value: \"\",\n              },\n              {\n                label: \"مدير\",\n                value: \"admin\",\n              },\n              {\n                label: \"مستخدم\",\n                value: \"user\",\n              },\n            ],\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>المستخدمين</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"الاسم\",\n              \"البريد الالكتروني\",\n              \"اسم المستخدم\",\n              \"رقم الهاتف\",\n              \"المستوي\",\n              \"تاريخ التسجيل\",\n            ]}\n            data={\n              users &&\n              users.map((u) => [\n                u._id,\n                u.name,\n                u.email,\n                u.username,\n                u.phoneNumber,\n                u.role,\n                u.createDate,\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Users;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Articles\\Articles.jsx",["304","305"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useArticlesHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Articles = () => {\n  const {\n    getArticles,\n    deleteArticle,\n    addArticle,\n    editArticle,\n  } = useArticlesHook();\n\n  const [articles, setArticles] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [articleObj, setArticleObj] = useState({\n    _id: 0,\n    title: \"\",\n    content: \"\",\n    mainImage: \"\",\n    createDate: \"\",\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getArticles();\n\n      if (result) {\n        setArticles(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setArticleObj({\n        _id: 0,\n        title: \"\",\n        content: \"\",\n        mainImage: \"\",\n        createDate: \"\",\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const article = articles.find((u) => u._id === _id);\n    setArticleObj(article);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setArticleObj(articles.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / المقالات</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف المقالة رقم ${articleObj._id}`}\n        onDelete={async () => {\n          if (await deleteArticle(articleObj._id)) {\n            setArticles(articles.filter((u) => u._id !== articleObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة مقال جديد\",\n          onSave: async () => {\n            const article = await addArticle(addFormRef);\n            if (article) {\n              setArticles([...articles, article]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"عنوان المقال\",\n\n            props: {\n              type: \"text\",\n              name: \"title\",\n              maxLength: 100,\n              placeholder: \"عنوان المقال\",\n              required: true,\n              onChange: (e) =>\n                setArticleObj({ ...articleObj, title: e.target.value }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي المقال\",\n            props: {\n              type: \"text\",\n              name: \"content\",\n              placeholder: \"محتوي المقال\",\n              required: true,\n\n              onChange: (e) =>\n                setArticleObj({ ...articleObj, content: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"mainImage\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n              multiple: true,\n\n              onChange: (e) =>\n                setArticleObj({ ...articleObj, mainImage: e.target.files[0] }),\n            },\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل المقال رقم ${articleObj._id}`,\n          onSave: async () => {\n            const result = await editArticle(editFormRef);\n            if (result) {\n              setArticles(\n                articles.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n          images: articleObj.mainImage,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: articleObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"عنوان المقال\",\n            props: {\n              type: \"text\",\n              value: articleObj.title,\n              name: \"title\",\n              placeholder: \"عنوان المقال\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setArticleObj({ ...articleObj, title: e.target.value }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي المقال\",\n            props: {\n              type: \"text\",\n              value: articleObj.content,\n              name: \"content\",\n              placeholder: \"محتوي المقال\",\n              required: true,\n              onChange: (e) =>\n                setArticleObj({ ...articleObj, content: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"mainImage\",\n              multiple: true,\n              onChange: (e) =>\n                setArticleObj({\n                  ...articleObj,\n                  mainImage: URL.createObjectURL(e.target.files[0]),\n                }),\n            },\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>المقالات</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"الصورة المصغرة\",\n              \"عنوان المقال\",\n              \"محتوي المقال\",\n              \"تاريخ الإضافة\",\n            ]}\n            data={\n              articles &&\n              articles.map((u) => [\n                u._id,\n                { type: \"slider\", images: u.mainImage },\n                u.title,\n                u.content,\n                u.createDate,\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Articles;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\DataBox\\DataBox.jsx",["306","307","308","309","310","311","312","313","314","315"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport SwiperCore, { Pagination, A11y } from \"swiper\";\nimport GoogleMapReact from \"google-map-react\";\n\n//Style\nimport \"./style.scss\";\nimport \"swiper/swiper.scss\";\nimport \"swiper/components/navigation/navigation.scss\";\nimport \"swiper/components/pagination/pagination.scss\";\nimport \"swiper/components/scrollbar/scrollbar.scss\";\n\n//Assets\n// @ts-ignore\nimport LocationMark from \"../../assets/img/location-mark.svg\";\nimport MapSearchBox from \"../MapSearchBox/MapSearchBox\";\n\nSwiperCore.use([Pagination, A11y]);\n\nconst DataBox = ({ options, inputs, visible, setVisible }) => {\n  const dataBoxRef = useRef(null);\n  const inputFileRef = useRef(null);\n\n  const [dataUrls, setDataUrls] = useState([]);\n\n  useEffect(() => {\n    if (options.images) bufferToImage({ images: options.images });\n\n    // window.addEventListener(\"mouseup\", containerHandler);\n  }, []);\n\n  const containerHandler = (e) => {\n    e.preventDefault();\n\n    if (dataBoxRef.current && !dataBoxRef.current.contains(e.target)) {\n      setVisible(false);\n      setDataUrls([]);\n    }\n  };\n\n  const bufferToImage = async ({ images = [] }) => {\n    if (images.length != 0) {\n      for (let i = 0; i < images.length; i++) {\n        let blob = await fetch(images[i]).then((r) => r.blob());\n        let reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onload = () => {\n          setDataUrls([...dataUrls, reader.result]);\n          inputFileRef.current &&\n            inputFileRef.current.files.append(reader.result);\n        };\n      }\n    }\n\n    if (inputFileRef.current)\n      for (let i = 0; i < inputFileRef.current.files.length; i++) {\n        let reader = new FileReader();\n        reader.readAsDataURL(inputFileRef.current.files[i]);\n        reader.onload = () => {\n          setDataUrls([...dataUrls, reader.result]);\n        };\n      }\n  };\n\n  const [map, setMap] = useState(false)\n  const [maps, setMaps] = useState(null)\n  const [isApiReady, setIsApiReady] = useState(null)\n\n  const apiIsLoaded = (map, maps) => {\n    if(map && maps) {\n      setMap(map);\n      setMaps(maps);\n      setIsApiReady(true);\n    }\n  }\n\n  return (\n    visible && (\n      <div className=\"float-box-container\">\n        <div className=\"data-box\" ref={dataBoxRef}>\n          <div className=\"closing\" onClick={() => setVisible(false)}>\n            <span></span>\n            <span></span>\n          </div>\n          <form\n            method=\"POST\"\n            onSubmit={(e) => e.preventDefault()}\n            ref={options.formRef}\n          >\n            {options.title && <h3>{options.title}</h3>}\n            <div className=\"input-items\">\n              {inputs.length !== 0 &&\n                inputs.map((input, i) =>\n                  input.tag === \"input\" ? (\n                    <React.Fragment key={\"frag-\" + i}>\n                      <div className=\"input-item\">\n                        {input.label && <label>{input.label}</label>}\n                        <input\n                          {...input.props}\n                          ref={input.props.type == \"file\" ? inputFileRef : null}\n                          onChange={\n                            input.props.type == \"file\"\n                              ? bufferToImage\n                              : input.props.onChange\n                          }\n                        />\n                      </div>\n                      {input.props.type == \"file\" && dataUrls.length != 0 && (\n                        <div className=\"input-item\">\n                          <Swiper\n                            spaceBetween={0}\n                            slidesPerView={1}\n                            pagination={{ clickable: true }}\n                          >\n                            {dataUrls.map((url, i) => (\n                              <SwiperSlide key={\"swipe-\" + i}>\n                                <img className=\"slider-img\" key={i} src={url} />\n                              </SwiperSlide>\n                            ))}\n                          </Swiper>\n                        </div>\n                      )}\n                    </React.Fragment>\n                  ) : input.tag === \"select\" ? (\n                    <div className=\"select-item\" key={\"select-\" + i}>\n                      {input.label && <label>{input.label}</label>}\n                      <select\n                        {...input.props}\n                        style={{ width: input.label ? \"250px\" : \"100%\" }}\n                      >\n                        {input.options.map((option) => (\n                          <option key={\"option-\" + i} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                      </select>\n                      <span></span>\n                    </div>\n                  ) : input.tag === \"textarea\" ? (\n                    <div\n                      className=\"input-item\"\n                      style={{ alignItems: \"flex-start\" }}\n                      key={\"textarea-\" + i}\n                    >\n                      {input.label && <label>{input.label}</label>}\n\n                      <textarea\n                        {...input.props}\n                        style={{ height: 250, minWidth: \"auto\" }}\n                      ></textarea>\n                    </div>\n                  ) : input.tag == \"location\" ? (\n                    <div className=\"map-box\" key={\"location-\" + i}>\n                      {\n                        isApiReady && (\n                          <MapSearchBox\n                            placeholder=\"Search\"\n                            googlemaps={maps}\n                            map={map}\n                            isApiReady={isApiReady}\n                            onPlacesChanged={(lat, lng) => {\n                              map.setCenter()\n                              input.setLocation({ lng, lat });\n                            }}\n                          />\n                        )\n                      }\n                      <GoogleMapReact\n                        // options={map => ({ mapTypeId: map.MapTypeId.SATELLITE })}\n                        bootstrapURLKeys={{\n                          key: \"AIzaSyA6pHHk3EgQKrcr0iVwrfmAxVrqwPPnc2Y\",\n                          libraries: ['places'].join(','),\n                        }}\n                        yesIWantToUseGoogleMapApiInternals\n                        onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps)}\n                        center={{\n                          lat: input.lat,\n                          lng: input.lng,\n                        }}\n                        defaultZoom={16}\n                        onClick={(data) => {\n                          input.setLocation({ lng: data.lng, lat: data.lat });\n                        }}\n                      >\n                        <img\n                          src={LocationMark}\n                          lat={input.lat}\n                          lng={input.lng}\n                          className=\"mark-img\"\n                        />\n                      </GoogleMapReact>\n                    </div>\n                  ) : (\n                    <React.Fragment key={\"frag-\" + i}></React.Fragment>\n                  )\n                )}\n              <div className=\"input-item\">\n                <button\n                  className=\"save-btn\"\n                  type=\"submit\"\n                  onClick={options.onSave}\n                >\n                  {options.btnSave || \"حفظ\"}\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    )\n  );\n};\nexport default DataBox;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ImageExercises\\ImageExercises.jsx",["316","317"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useImageExercisesHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst ImageExercises = () => {\n  const {\n    getImageExercises,\n    deleteImageExercise,\n    addImageExercise,\n    editImageExercise,\n    getCategories\n  } = useImageExercisesHook();\n\n  const [imageExercises, setImageExercises] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [imageExerciseObj, setImageExerciseObj] = useState({\n    _id: 0,\n    title: \"\",\n    description: \"\",\n    images: [],\n    createDate: \"\",\n    categoryId: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getImageExercises();\n\n      if (result) {\n        setImageExercises(result);\n      }\n      const catResult = await getCategories();\n      if (catResult) {\n        setCategories(catResult.map(category => ({ label: category.name, value: category._id })))\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setImageExerciseObj({\n        _id: 0,\n        title: \"\",\n        description: \"\",\n        images: [],\n        createDate: \"\",\n        categoryId: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const imageExercise = imageExercises.find((u) => u._id === _id);\n    setImageExerciseObj(imageExercise);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setImageExerciseObj(imageExercises.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / تمارين رياضية (صور)</title> \n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف التمرين رقم ${imageExerciseObj._id}`}\n        onDelete={async () => {\n          if (await deleteImageExercise(imageExerciseObj._id)) {\n            setImageExercises(\n              imageExercises.filter((u) => u._id !== imageExerciseObj._id)\n            );\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة تمرين جديد\",\n          onSave: async () => {\n            const imageExercise = await addImageExercise(addFormRef);\n            if (imageExercise) {\n              setImageExercises([...imageExercises, imageExercise]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"عنوان التمرين\",\n\n            props: {\n              type: \"text\",\n              name: \"title\",\n              maxLength: 100,\n              placeholder: \"عنوان التمرين\",\n              required: true,\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  title: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"select\",\n            label: \"القسم\",\n            props: {\n              name: \"categoryId\",\n              onChange: (e) => setImageExerciseObj({ ...imageExerciseObj, categoryId: e.target.value }),\n            },\n            options: categories,\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي التمرين\",\n            props: {\n              type: \"text\",\n              name: \"description\",\n              placeholder: \"محتوي التمرين\",\n              required: true,\n\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  description: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصور\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"images\",\n              placeholder: \"الصور\",\n              multiple: true,\n              required: true,\n\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  images: e.target.files,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              name: \"type\",\n              type: \"hidden\",\n              value: 1,\n            },\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل التمرين رقم ${imageExerciseObj._id}`,\n          onSave: async () => {\n            const result = await editImageExercise(editFormRef);\n            if (result) {\n              setImageExercises(\n                imageExercises.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: imageExerciseObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"عنوان التمرين\",\n            props: {\n              type: \"text\",\n              value: imageExerciseObj.title,\n              name: \"title\",\n              placeholder: \"عنوان التمرين\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  title: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"select\",\n            label: \"القسم\",\n            props: {\n              value: imageExerciseObj?.categoryId?._id,\n              name: \"categoryId\",\n              onChange: (e) => setImageExerciseObj({ ...imageExerciseObj, categoryId: e.target.value }),\n            },\n            options: categories,\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي التمرين\",\n            props: {\n              type: \"text\",\n              value: imageExerciseObj.description,\n              name: \"description\",\n              placeholder: \"محتوي التمرين\",\n              required: true,\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  description: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصور\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              multiple: true,\n              placeholder: \"الصور\",\n              name: \"images\",\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  images: e.target.files,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              name: \"type\",\n              type: \"hidden\",\n              value: 1,\n            },\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>تمارين رياضية (صور)</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"الصور\",\n              \"العنوان\",\n              \"القسم\",\n              \"محتوي التمرينة\",\n              \"تاريخ الإضافة\",\n            ]}\n            data={\n              imageExercises &&\n              imageExercises.map((u) => [\n                u._id,\n                { type: \"slider\", images: u.images },\n                u.title,\n                u.categoryId?.name,\n                u.description,\n                u.createDate,\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ImageExercises;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\VideoExercises\\VideoExercises.jsx",["318","319","320","321","322"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useVideoExercisesHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst VideoExercises = () => {\n  const {\n    getVideoExercises,\n    deleteVideoExercise,\n    addVideoExercise,\n    editVideoExercise,\n    getCategories\n  } = useVideoExercisesHook();\n\n  const [videoExercises, setVideoExercises] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [videoExerciseObj, setVideoExerciseObj] = useState({\n    _id: 0,\n    title: \"\",\n    description: \"\",\n    videos: [],\n    createDate: \"\",\n    categoryId: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getVideoExercises();\n\n      if (result) {\n        setVideoExercises(result);\n      }\n      // const catResult = await getCategories();\n      // if (catResult) {\n      //   setCategories(catResult.map(category => ({ label: category.name, value: category._id })))\n      // }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setVideoExerciseObj({\n        _id: 0,\n        title: \"\",\n        description: \"\",\n        videos: [],\n        createDate: \"\",\n        categoryId: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const videoExercise = videoExercises.find((u) => u._id === _id);\n    setVideoExerciseObj(videoExercise);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setVideoExerciseObj(videoExercises.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / قسم البحث عن تمرين</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف التمرين رقم ${videoExerciseObj._id}`}\n        onDelete={async () => {\n          if (await deleteVideoExercise(videoExerciseObj._id)) {\n            setVideoExercises(\n              videoExercises.filter((u) => u._id !== videoExerciseObj._id)\n            );\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة تمرين جديد\",\n          onSave: async () => {\n            const videoExercise = await addVideoExercise(addFormRef);\n\n            if (videoExercise) {\n              setVideoExercises([...videoExercises, videoExercise]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"عنوان التمرين\",\n\n            props: {\n              type: \"text\",\n              name: \"title\",\n              maxLength: 100,\n              placeholder: \"عنوان التمرين\",\n              required: true,\n              onChange: (e) =>\n                setVideoExerciseObj({\n                  ...videoExerciseObj,\n                  title: e.target.value,\n                }),\n            },\n          },\n          // {\n          //   tag: \"select\",\n          //   label: \"القسم\",\n          //   props: {\n          //     name: \"categoryId\",\n          //     onChange: (e) => setVideoExerciseObj({ ...videoExerciseObj, categoryId: e.target.value }),\n          //   },\n          //   options: categories,\n          // },\n          {\n            tag: \"textarea\",\n            label: \"محتوي التمرين\",\n            props: {\n              type: \"text\",\n              name: \"description\",\n              placeholder: \"محتوي التمرين\",\n              required: true,\n\n              onChange: (e) =>\n                setVideoExerciseObj({\n                  ...videoExerciseObj,\n                  description: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الفيديو\",\n            props: {\n              name: \"videoId\",\n              placeholder: \"قم بنسخ رقم تعريف الفيديو\",\n              required: true,\n\n              onChange: (e) =>\n                setVideoExerciseObj({\n                  ...videoExerciseObj,\n                  videos: e.target.files,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              name: \"type\",\n              type: \"hidden\",\n              value: 2,\n            },\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل التمرين رقم ${videoExerciseObj._id}`,\n          onSave: async () => {\n            const result = await editVideoExercise(editFormRef);\n            if (result) {\n              setVideoExercises(\n                videoExercises.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: videoExerciseObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"عنوان التمرين\",\n            props: {\n              type: \"text\",\n              value: videoExerciseObj.title,\n              name: \"title\",\n              placeholder: \"عنوان التمرين\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setVideoExerciseObj({\n                  ...videoExerciseObj,\n                  title: e.target.value,\n                }),\n            },\n          },\n          // {\n          //   tag: \"select\",\n          //   label: \"القسم\",\n          //   props: {\n          //     value: videoExerciseObj?.categoryId?._id,\n          //     name: \"categoryId\",\n          //     onChange: (e) => setVideoExerciseObj({ ...videoExerciseObj, categoryId: e.target.value }),\n          //   },\n          //   options: categories,\n          // },\n          {\n            tag: \"textarea\",\n            label: \"محتوي التمرين\",\n            props: {\n              type: \"text\",\n              value: videoExerciseObj.description,\n              name: \"description\",\n              placeholder: \"محتوي التمرين\",\n              required: true,\n              onChange: (e) =>\n                setVideoExerciseObj({\n                  ...videoExerciseObj,\n                  description: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الفيديو\",\n            props: {\n              name: \"videoId\",\n              value: videoExerciseObj.videoId,\n              placeholder: \"قم بنسخ رقم تعريف الفيديو\",\n              required: true,\n\n              onChange: (e) =>\n                setVideoExerciseObj({\n                  ...videoExerciseObj,\n                  videos: e.target.files,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              name: \"type\",\n              type: \"hidden\",\n              value: 2,\n            },\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>قسم البحث عن تمرين</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"الفيديو\",\n              \"العنوان\",\n              \"محتوي التمرينة\",\n              \"تاريخ الإضافة\",\n            ]}\n            data={\n              videoExercises &&\n              videoExercises.map((u) => [\n                u._id,\n                { type: \"video\", videoId: u.videoId },\n                u.title,\n                u.description,\n                u.createDate,\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default VideoExercises;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\MapBox\\MapBox.jsx",["323","324"],"import { useState } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\n\n//Style\nimport \"./style.scss\";\n\n//Assets\n// @ts-ignore\nimport LocationMark from \"../../assets/img/location-mark.svg\";\n\nconst MapBox = ({\n  visible,\n  setVisible = (visible) => null,\n  lat = 33.363666,\n  lng = 44.404379,\n}) => {\n  return (\n    visible && (\n      <div className=\"float-box-container\">\n        <div className=\"map-box-container\">\n          <div className=\"closing\" onClick={() => setVisible(false)}>\n            <span></span>\n            <span></span>\n          </div>\n          <GoogleMapReact\n            // options={map => ({ mapTypeId: map.MapTypeId.SATELLITE })}\n            bootstrapURLKeys={{\n              key: \"AIzaSyA6pHHk3EgQKrcr0iVwrfmAxVrqwPPnc2Y\",\n            }}\n            defaultCenter={{\n              lat,\n              lng,\n            }}\n            defaultZoom={16}\n          >\n            <img src={LocationMark} lat={lat} lng={lng} className=\"mark-img\" />\n          </GoogleMapReact>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default MapBox;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Products\\Products.jsx",["325","326"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useProductsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Products = () => {\n  const {\n    getProducts,\n    deleteProduct,\n    addProduct,\n    editProduct,\n    getCategories\n  } = useProductsHook();\n\n  const [products, setProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [productObj, setProductObj] = useState({\n    _id: 0,\n    title: \"\",\n    price: \"\",\n    description: \"\",\n    coachBrief: \"\",\n    mainImage: \"\",\n    createDate: \"\",\n    categoryId: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getProducts();\n      if (result) {\n        setProducts(result);\n      }\n      const catResult = await getCategories();\n      if (catResult) {\n        setCategories(catResult.map(category => ({ label: category.title, value: category._id })))\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setProductObj({\n        _id: 0,\n        title: \"\",\n        price: \"\",\n        description: \"\",\n        coachBrief: \"\",\n        mainImage: \"\",\n        createDate: \"\",\n        categoryId: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = _id => {\n    const product = products.find(u => u._id === _id);\n    setProductObj(product);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = _id => {\n    setProductObj(products.find(u => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / المنتجات</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف المنتج رقم ${productObj._id}`}\n        onDelete={async () => {\n          if (await deleteProduct(productObj._id)) {\n            setProducts(products.filter(u => u._id !== productObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة منتج جديد\",\n          onSave: async () => {\n            const product = await addProduct(addFormRef);\n            console.log(\"product\", product);\n            if (product) {\n              setProducts([...products, product]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"عنوان المنتج\",\n\n            props: {\n              type: \"text\",\n              name: \"title\",\n              maxLength: 100,\n              placeholder: \"عنوان المنتج\",\n              required: true,\n              onChange: e =>\n                setProductObj({ ...productObj, title: e.target.value })\n            }\n          },\n          {\n            tag: \"textarea\",\n            label: \"وصف المنتج\",\n            props: {\n              type: \"text\",\n              name: \"description\",\n              placeholder: \"وصف المنتج\",\n              required: true,\n\n              onChange: e =>\n                setProductObj({ ...productObj, description: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"السعر\",\n            props: {\n              type: \"text\",\n              name: \"price\",\n              placeholder: \"السعر\",\n              required: true,\n\n              onChange: e =>\n                setProductObj({ ...productObj, price: e.target.value })\n            }\n          },\n          // {\n          //   tag: \"textarea\",\n          //   label: \"نبذة عن الكوتش\",\n          //   props: {\n          //     type: \"text\",\n          //     name: \"coachBrief\",\n          //     placeholder: \"نبذة عن الكوتش\",\n          //     required: true,\n\n          //     onChange: e =>\n          //       setProductObj({ ...productObj, coachBrief: e.target.value })\n          //   }\n          // },\n          {\n            tag: \"select\",\n            label: \"القسم\",\n            props: {\n              name: \"categoryId\",\n              onChange: (e) => setProductObj({ ...productObj, categoryId: e.target.value }),\n            },\n            options: categories,\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"mainImage\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n\n              onChange: e =>\n                setProductObj({ ...productObj, mainImage: e.target.files[0] })\n            }\n          }\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل المستخدم رقم ${productObj._id}`,\n          onSave: async () => {\n            const result = await editProduct(editFormRef);\n            if (result) {\n              setProducts(\n                products.map(u => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: productObj._id,\n              name: \"_id\"\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"عنوان المنتج\",\n            props: {\n              type: \"text\",\n              value: productObj.title,\n              name: \"title\",\n              placeholder: \"عنوان المنتج\",\n              required: true,\n              maxLength: 100,\n              onChange: e =>\n                setProductObj({ ...productObj, title: e.target.value })\n            }\n          },\n          {\n            tag: \"textarea\",\n            label: \"وصف المنتج\",\n            props: {\n              type: \"text\",\n              value: productObj.description,\n              name: \"description\",\n              placeholder: \"وصف المنتج\",\n              required: true,\n              onChange: e =>\n                setProductObj({ ...productObj, description: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"السعر\",\n            props: {\n              type: \"text\",\n              name: \"price\",\n              placeholder: \"السعر\",\n              value: productObj.price,\n              required: true,\n\n              onChange: e =>\n                setProductObj({ ...productObj, price: e.target.value })\n            }\n          },\n          // {\n          //   tag: \"textarea\",\n          //   label: \"نبذة عن الكوتش\",\n          //   props: {\n          //     type: \"text\",\n          //     name: \"coachBrief\",\n          //     value: productObj.coachBrief,\n          //     placeholder: \"نبذة عن الكوتش\",\n          //     required: true,\n\n          //     onChange: e =>\n          //       setProductObj({ ...productObj, coachBrief: e.target.value })\n          //   }\n          // },\n          {\n            tag: \"select\",\n            label: \"القسم\",\n            props: {\n              value: productObj?.categoryId?._id,\n              name: \"categoryId\",\n              onChange: (e) => setProductObj({ ...productObj, categoryId: e.target.value }),\n            },\n            options: categories,\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"mainImage\",\n              onChange: e =>\n                setProductObj({\n                  ...productObj,\n                  mainImage: URL.createObjectURL(e.target.files[0])\n                })\n            }\n          }\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>المنتجات</h6>\n        </div>\n        <div className=\"container\">\n          {/* <SearchBox /> */}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete\n            }}\n            headers={[\n              \"#\",\n              \"صورة المنتج\",\n              \"اسم المنتج\",\n              \"وصف المنتج\",\n              \"السعر\",\n              \"القسم\",\n              \"تاريخ الإضافة\"\n            ]}\n            data={\n              products &&\n              products.map(u => [\n                u._id,\n                { type: \"img\", src: u.mainImage },\n                u.title,\n                u.description,\n                u.price,\n                u?.categoryId?.title,\n                u.createDate\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Products;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ProductsCategory\\ProductsCategory.jsx",["327","328"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useProductsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst ProductsCategory = () => {\n  const {\n    getProducts,\n    deleteProduct,\n    addProduct,\n    editProduct\n  } = useProductsHook();\n\n  const [products, setProducts] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [productObj, setProductObj] = useState({\n    _id: 0,\n    title: \"\",\n    price: \"\",\n    description: \"\",\n    coachBrief: \"\",\n    mainImage: \"\",\n    createDate: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getProducts();\n\n      if (result) {\n        setProducts(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setProductObj({\n        _id: 0,\n        title: \"\",\n        price: \"\",\n        description: \"\",\n        coachBrief: \"\",\n        mainImage: \"\",\n        createDate: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = _id => {\n    const product = products.find(u => u._id === _id);\n    setProductObj(product);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = _id => {\n    setProductObj(products.find(u => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / أقسام المتجر</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف القسم رقم ${productObj._id}`}\n        onDelete={async () => {\n          if (await deleteProduct(productObj._id)) {\n            setProducts(products.filter(u => u._id !== productObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة منتج جديد\",\n          onSave: async () => {\n            const product = await addProduct(addFormRef);\n\n            if (product) {\n              setProducts([...products, product]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n\n            props: {\n              type: \"text\",\n              name: \"title\",\n              maxLength: 100,\n              placeholder: \"اسم القسم\",\n              required: true,\n              onChange: e =>\n                setProductObj({ ...productObj, title: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"mainImage\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n\n              onChange: e =>\n                setProductObj({ ...productObj, mainImage: e.target.files[0] })\n            }\n          }\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل القسم رقم ${productObj._id}`,\n          onSave: async () => {\n            const result = await editProduct(editFormRef);\n\n            if (result) {\n              setProducts(\n                products.map(u => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: productObj._id,\n              name: \"_id\"\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n            props: {\n              type: \"text\",\n              value: productObj.title,\n              name: \"title\",\n              placeholder: \"اسم القسم\",\n              required: true,\n              maxLength: 100,\n              onChange: e =>\n                setProductObj({ ...productObj, title: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"mainImage\",\n              onChange: e =>\n                setProductObj({\n                  ...productObj,\n                  mainImage: URL.createObjectURL(e.target.files[0])\n                })\n            }\n          }\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>أقسام المتجر</h6>\n        </div>\n        <div className=\"container\">\n          {/* <SearchBox /> */}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete\n            }}\n            headers={[\n              \"#\",\n              \"صورة القسم\",\n              \"اسم القسم\",\n              \"تاريخ الإضافة\"\n            ]}\n            data={\n              products &&\n              products.map(u => [\n                u._id,\n                { type: \"img\", src: u.mainImage },\n                u.title,\n                u.createDate\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ProductsCategory;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ImageExercisesCategory\\ImageExercisesCategory.jsx",["329","330"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useProductsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst ProductsCategory = () => {\n  const {\n    getProducts,\n    deleteProduct,\n    addProduct,\n    editProduct\n  } = useProductsHook();\n\n  const [products, setProducts] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [productObj, setProductObj] = useState({\n    _id: 0,\n    name: \"\",\n    price: \"\",\n    description: \"\",\n    coachBrief: \"\",\n    image: \"\",\n    createDate: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getProducts();\n\n      if (result) {\n        setProducts(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setProductObj({\n        _id: 0,\n        name: \"\",\n        price: \"\",\n        description: \"\",\n        coachBrief: \"\",\n        image: \"\",\n        createDate: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = _id => {\n    const product = products.find(u => u._id === _id);\n    setProductObj(product);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = _id => {\n    setProductObj(products.find(u => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / أقسام التمارين (صور)</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف القسم رقم ${productObj._id}`}\n        onDelete={async () => {\n          if (await deleteProduct(productObj._id)) {\n            setProducts(products.filter(u => u._id !== productObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة قسم جديد\",\n          onSave: async () => {\n            const product = await addProduct(addFormRef);\n\n            if (product) {\n              setProducts([...products, product]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n\n            props: {\n              type: \"text\",\n              name: \"name\",\n              maxLength: 100,\n              placeholder: \"اسم القسم\",\n              required: true,\n              onChange: e =>\n                setProductObj({ ...productObj, name: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"image\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n\n              onChange: e =>\n                setProductObj({ ...productObj, image: e.target.files[0] })\n            }\n          }\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل القسم رقم ${productObj._id}`,\n          onSave: async () => {\n            const result = await editProduct(editFormRef);\n\n            if (result) {\n              setProducts(\n                products.map(u => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: productObj._id,\n              name: \"_id\"\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n            props: {\n              type: \"text\",\n              value: productObj.name,\n              name: \"name\",\n              placeholder: \"اسم القسم\",\n              required: true,\n              maxLength: 100,\n              onChange: e =>\n                setProductObj({ ...productObj, name: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"image\",\n              onChange: e =>\n                setProductObj({\n                  ...productObj,\n                  image: URL.createObjectURL(e.target.files[0])\n                })\n            }\n          }\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>أقسام التمارين (صور)</h6>\n        </div>\n        <div className=\"container\">\n          {/* <SearchBox /> */}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete\n            }}\n            headers={[\n              \"#\",\n              \"صورة القسم\",\n              \"اسم القسم\",\n              \"تاريخ الإضافة\"\n            ]}\n            data={\n              products &&\n              products.map(u => [\n                u._id,\n                { type: \"img\", src: u.image },\n                u.name,\n                u.createDate\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ProductsCategory;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\VideoExercisesCategory\\VideoExercisesCategory.jsx",["331","332"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useProductsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst ProductsCategory = () => {\n  const {\n    getProducts,\n    deleteProduct,\n    addProduct,\n    editProduct\n  } = useProductsHook();\n\n  const [products, setProducts] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [productObj, setProductObj] = useState({\n    _id: 0,\n    name: \"\",\n    price: \"\",\n    description: \"\",\n    coachBrief: \"\",\n    image: \"\",\n    createDate: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getProducts();\n\n      if (result) {\n        setProducts(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setProductObj({\n        _id: 0,\n        name: \"\",\n        price: \"\",\n        description: \"\",\n        coachBrief: \"\",\n        image: \"\",\n        createDate: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = _id => {\n    const product = products.find(u => u._id === _id);\n    setProductObj(product);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = _id => {\n    setProductObj(products.find(u => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / أقسام البحث عن تمرين</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف القسم رقم ${productObj._id}`}\n        onDelete={async () => {\n          if (await deleteProduct(productObj._id)) {\n            setProducts(products.filter(u => u._id !== productObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة قسم جديد\",\n          onSave: async () => {\n            const product = await addProduct(addFormRef);\n\n            if (product) {\n              setProducts([...products, product]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n\n            props: {\n              type: \"text\",\n              name: \"name\",\n              maxLength: 100,\n              placeholder: \"اسم القسم\",\n              required: true,\n              onChange: e =>\n                setProductObj({ ...productObj, name: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"image\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n\n              onChange: e =>\n                setProductObj({ ...productObj, image: e.target.files[0] })\n            }\n          }\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل القسم رقم ${productObj._id}`,\n          onSave: async () => {\n            const result = await editProduct(editFormRef);\n\n            if (result) {\n              setProducts(\n                products.map(u => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: productObj._id,\n              name: \"_id\"\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n            props: {\n              type: \"text\",\n              value: productObj.name,\n              name: \"name\",\n              placeholder: \"اسم القسم\",\n              required: true,\n              maxLength: 100,\n              onChange: e =>\n                setProductObj({ ...productObj, name: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"image\",\n              onChange: e =>\n                setProductObj({\n                  ...productObj,\n                  image: URL.createObjectURL(e.target.files[0])\n                })\n            }\n          }\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>أقسام البحث عن تمرين</h6>\n        </div>\n        <div className=\"container\">\n          {/* <SearchBox /> */}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete\n            }}\n            headers={[\n              \"#\",\n              \"صورة القسم\",\n              \"اسم القسم\",\n              \"تاريخ الإضافة\"\n            ]}\n            data={\n              products &&\n              products.map(u => [\n                u._id,\n                { type: \"img\", src: u.image },\n                u.name,\n                u.createDate\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ProductsCategory;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Orders\\Orders.jsx",["333","334","335","336","337","338","339","340","341","342","343"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useOrdersHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Orders = () => {\n  const { getOrders, deleteOrder, addOrder, editOrder } = useOrdersHook();\n\n  const [orders, setOrders] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [orderObj, setOrderObj] = useState({\n    _id: 0,\n    title: \"\",\n    content: \"\",\n    mainImage: \"\",\n    createDate: \"\",\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getOrders();\n\n      if (result) {\n        setOrders(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setOrderObj({\n        _id: 0,\n        title: \"\",\n        content: \"\",\n        mainImage: \"\",\n        createDate: \"\",\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const order = orders.find((u) => u._id === _id);\n    setOrderObj(order);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setOrderObj(orders.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / طلبات الشراء</title>\n      </Helmet>\n      {/* <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف المقالة رقم ${orderObj._id}`}\n        onDelete={async () => {\n          if (await deleteOrder(orderObj._id)) {\n            setOrders(orders.filter((u) => u._id !== orderObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      /> */}\n      {/* <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة مقال جديد\",\n          onSave: async () => {\n            const order = await addOrder(addFormRef);\n            if (order) {\n              setOrders([...orders, order]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"عنوان المقال\",\n\n            props: {\n              type: \"text\",\n              name: \"title\",\n              maxLength: 100,\n              placeholder: \"عنوان المقال\",\n              required: true,\n              onChange: (e) =>\n                setOrderObj({ ...orderObj, title: e.target.value }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي المقال\",\n            props: {\n              type: \"text\",\n              name: \"content\",\n              placeholder: \"محتوي المقال\",\n              required: true,\n\n              onChange: (e) =>\n                setOrderObj({ ...orderObj, content: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"mainImage\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n\n              onChange: (e) =>\n                setOrderObj({ ...orderObj, mainImage: e.target.files[0] }),\n            },\n          },\n        ]}\n      /> */}\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل الطلب رقم ${orderObj._id}`,\n          onSave: async () => {\n            const result = await editOrder(editFormRef);\n            if (result) {\n              setOrders(orders.map((u) => (u._id === result._id ? result : u)));\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: orderObj._id,\n              name: \"_id\"\n            }\n          },\n          {\n            tag: \"select\",\n            label: \"القسم\",\n            props: {\n              value: orderObj.statusId,\n              name: \"statusId\",\n              onChange: (e) => setOrderObj({ ...orderObj, statusId: e.target.value }),\n            },\n            options: [{\n              label: \"لم يتم الدفع\",\n              value: 1\n            }, {\n              label: \"تم الدفع\",\n              value: 2\n            }, {\n              label: \"ملغي\",\n              value: 3\n            }],\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>طلبات الشراء</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          {/* <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div> */}\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"المشتري\",\n              \" العنوان\",\n              \"رقم الهاتف\",\n              \"المنتج\",\n              \"وسيلة الدفع\",\n              \"حالة الدفع\",\n              \"صورة تأكيد الدفع\",\n              \"تاريخ الطلب\",\n            ]}\n            data={\n              orders &&\n              orders.map((u) => [\n                u._id,\n                u.userId?.name,\n                u.address,\n                u.tel,\n                u.productId?.title,\n                u.paymentMethodId?.name,\n                u.statusId == 1\n                  ? \"لم يتم الدفع\"\n                  : u.statusId == 2\n                  ? \"تم الدفع\"\n                  : u.statusId == 3\n                  ? \"ملغي\"\n                  : \"غير معروف\",\n                { type: \"img\", src: u.paymentImage },\n                u.createDate,\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Orders;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Halls\\Halls.jsx",["344","345"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox, MapBox } from \"../../components\";\n\n//Hooks\nimport useHallsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Halls = () => {\n  const { getHalls, deleteHall, addHall, editHall } = useHallsHook();\n\n  const [halls, setHalls] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n  const [mapBoxVisible, setMapBoxVisible] = useState(false);\n\n  const [hallObj, setHallObj] = useState({\n    _id: 0,\n    name: \"\",\n    city: \"\",\n    brief: \"\",\n    subscriptions: \"\",\n    images: [],\n    createDate: \"\",\n    location: { coordinates: [43.679291, 33.223190] },\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getHalls();\n\n      if (result) {\n        setHalls(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setHallObj({\n        _id: 0,\n        name: \"\",\n        city: \"\",\n        brief: \"\",\n        subscriptions: \"\",\n        images: [],\n        createDate: \"\",\n        location: { coordinates: [43.679291, 33.223190] },\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const hall = halls.find((u) => u._id === _id);\n    setHallObj(hall);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setHallObj(halls.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / القاعات</title>\n      </Helmet>\n      <MapBox\n        visible={mapBoxVisible}\n        setVisible={(visible) => setMapBoxVisible(visible)}\n        lat={hallObj.location.coordinates[1]}\n        lng={hallObj.location.coordinates[0]}\n      />\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف القاعة رقم ${hallObj._id}`}\n        onDelete={async () => {\n          if (await deleteHall(hallObj._id)) {\n            setHalls(halls.filter((u) => u._id !== hallObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة قاعة جديد\",\n          onSave: async () => {\n            const hall = await addHall(addFormRef);\n            if (hall) {\n              setHalls([...halls, hall]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"اسم القاعة\",\n\n            props: {\n              type: \"text\",\n              name: \"name\",\n              maxLength: 100,\n              placeholder: \"اسم القاعة\",\n              required: true,\n              defaultValue: hallObj.name,\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  name: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"المدينة\",\n            props: {\n              type: \"text\",\n              name: \"city\",\n              maxLength: 100,\n              placeholder: \"المدينة\",\n              required: true,\n              defaultValue: hallObj.city,\n\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  city: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"وصف القاعة\",\n            props: {\n              type: \"text\",\n              name: \"brief\",\n              placeholder: \"وصف القاعة\",\n              required: true,\n              defaultValue: hallObj.brief,\n\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  brief: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"الاشتراكات\",\n            props: {\n              type: \"text\",\n              name: \"subscriptions\",\n              placeholder: \"مثال:\\n 150,شهري\\n1200,سنوي\",\n              required: true,\n              defaultValue: hallObj.subscriptions,\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  // subscriptions: e.target.value,\n                }),\n            },\n          },\n\n          {\n            tag: \"input\",\n            label: \"الصور\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"images\",\n              placeholder: \"الصور\",\n              multiple: true,\n              required: true,\n\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  images: e.target.files,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              name: \"lat\",\n              value: hallObj.location.coordinates[1],\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              name: \"lng\",\n              value: hallObj.location.coordinates[0],\n            },\n          },\n          {\n            tag: \"location\",\n            label: \"تحديد المكان علي الخريطة\",\n            setLocation: ({ lng, lat }) => {\n              addFormRef.current.lng.setAttribute(\"value\", lng);\n              addFormRef.current.lat.setAttribute(\"value\", lat);\n              setHallObj({\n                ...hallObj,\n                location: { coordinates: [lng, lat] },\n              });\n            },\n            lng: hallObj.location.coordinates[0],\n            lat: hallObj.location.coordinates[1],\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل القاعة رقم ${hallObj._id}`,\n          onSave: async () => {\n            const result = await editHall(editFormRef);\n            if (result) {\n              setHalls(halls.map((u) => (u._id === result._id ? result : u)));\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"اسم القاعة\",\n\n            props: {\n              type: \"text\",\n              name: \"name\",\n              maxLength: 100,\n              placeholder: \"اسم القاعة\",\n              required: true,\n              defaultValue: hallObj.name,\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  name: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"المدينة\",\n            props: {\n              type: \"text\",\n              name: \"city\",\n              maxLength: 100,\n              placeholder: \"المدينة\",\n              required: true,\n              defaultValue: hallObj.city,\n\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  city: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"وصف القاعة\",\n            props: {\n              type: \"text\",\n              name: \"brief\",\n              placeholder: \"وصف القاعة\",\n              required: true,\n              defaultValue: hallObj.brief,\n\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  brief: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"الاشتراكات\",\n            props: {\n              type: \"text\",\n              name: \"subscriptions\",\n              placeholder: \"مثال:\\n 150,شهري\\n1200,سنوي\",\n              required: true,\n              defaultValue:\n                hallObj.subscriptions &&\n                hallObj.subscriptions.map(\n                  (item) => item.price + \",\" + item.name + \"\\n\"\n                ),\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  // subscriptions: e.target.value,\n                }),\n            },\n          },\n\n          {\n            tag: \"input\",\n            label: \"الصور\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"images\",\n              placeholder: \"الصور\",\n              multiple: true,\n              required: true,\n\n              onChange: (e) =>\n                setHallObj({\n                  ...hallObj,\n                  images: e.target.files,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              name: \"lat\",\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              name: \"lng\",\n            },\n          },\n          {\n            tag: \"location\",\n            label: \"تحديد المكان علي الخريطة\",\n            setLocation: (location) => {\n              editFormRef.current.lng.setAttribute(\"value\", location.lng);\n              editFormRef.current.lat.setAttribute(\"value\", location.lat);\n              setHallObj({\n                ...hallObj,\n                location: { coordinates: [location.lng, location.lat] },\n              });\n            },\n            lng: hallObj.location.coordinates[0],\n            lat: hallObj.location.coordinates[1],\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>القاعات</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"اسم القاعة\",\n              \"الصور\",\n              \"وصف القاعة\",\n              \"المدينة\",\n              \"المكان\",\n              \"الاشتراكات\",\n              \"تاريخ الإضافة\",\n            ]}\n            data={\n              halls &&\n              halls.map((u) => [\n                u._id,\n                u.name,\n                { type: \"slider\", images: u.images },\n                u.brief,\n                u.city,\n                {\n                  type: \"location\",\n                  location: u.location,\n                  onClick: () => {\n                    setMapBoxVisible(true);\n                    setHallObj(u);\n                  },\n                },\n                `${u.subscriptions.map((s) => s.price + \" \" + s.name)}`,\n                u.createDate,\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Halls;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\PaymentMethods\\PaymentMethods.jsx",["346","347"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport usePaymentMethodsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst PaymentMethods = () => {\n  const {\n    getPaymentMethods,\n    deletePaymentMethod,\n    addPaymentMethod,\n    editPaymentMethod,\n  } = usePaymentMethodsHook();\n\n  const [paymentMethods, setPaymentMethods] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [paymentMethodObj, setPaymentMethodObj] = useState({\n    _id: 0,\n    name: \"\",\n    description: \"\",\n    mainImage: \"\",\n    createDate: \"\",\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getPaymentMethods();\n\n      if (result) {\n        setPaymentMethods(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setPaymentMethodObj({\n        _id: 0,\n        name: \"\",\n        description: \"\",\n        mainImage: \"\",\n        createDate: \"\",\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const paymentMethod = paymentMethods.find((u) => u._id === _id);\n    setPaymentMethodObj(paymentMethod);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setPaymentMethodObj(paymentMethods.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / وسائل الدفع</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف وسيلة الدفع رقم ${paymentMethodObj._id}`}\n        onDelete={async () => {\n          if (await deletePaymentMethod(paymentMethodObj._id)) {\n            setPaymentMethods(\n              paymentMethods.filter((u) => u._id !== paymentMethodObj._id)\n            );\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة وسيلة دفع جديد\",\n          onSave: async () => {\n            const paymentMethod = await addPaymentMethod(addFormRef);\n            if (paymentMethod) {\n              setPaymentMethods([...paymentMethods, paymentMethod]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"اسم وسيلة دفع\",\n\n            props: {\n              type: \"text\",\n              name: \"name\",\n              maxLength: 100,\n              placeholder: \"اسم وسيلة دفع\",\n              required: true,\n              onChange: (e) =>\n                setPaymentMethodObj({\n                  ...paymentMethodObj,\n                  name: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"خطوات الدفع\",\n            props: {\n              type: \"text\",\n              name: \"description\",\n              placeholder: \"خطوات الدفع\",\n              required: true,\n\n              onChange: (e) =>\n                setPaymentMethodObj({\n                  ...paymentMethodObj,\n                  description: e.target.value,\n                }),\n            },\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          name: `تعديل المستخدم رقم ${paymentMethodObj._id}`,\n          onSave: async () => {\n            const result = await editPaymentMethod(editFormRef);\n            if (result) {\n              setPaymentMethods(\n                paymentMethods.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: paymentMethodObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"اسم وسيلة دفع\",\n            props: {\n              type: \"text\",\n              value: paymentMethodObj.name,\n              name: \"name\",\n              placeholder: \"اسم وسيلة دفع\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setPaymentMethodObj({\n                  ...paymentMethodObj,\n                  name: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"خطوات الدفع\",\n            props: {\n              type: \"text\",\n              value: paymentMethodObj.description,\n              name: \"description\",\n              placeholder: \"خطوات الدفع\",\n              required: true,\n              onChange: (e) =>\n                setPaymentMethodObj({\n                  ...paymentMethodObj,\n                  description: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"mainImage\",\n              onChange: (e) =>\n                setPaymentMethodObj({\n                  ...paymentMethodObj,\n                  mainImage: URL.createObjectURL(e.target.files[0]),\n                }),\n            },\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>وسائل الدفع</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\"#\", \"اسم وسيلة الدفع\", \"خطوات الدفع\"]}\n            data={\n              paymentMethods &&\n              paymentMethods.map((u) => [u._id, u.name, u.description])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PaymentMethods;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Proteins\\Proteins.jsx",["348","349"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useProteinsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Proteins = () => {\n  const {\n    getProteins,\n    deleteProtein,\n    addProtein,\n    editProtein,\n    getCategories\n  } = useProteinsHook();\n\n  const [proteins, setProteins] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n  const [categories, setCategories] = useState([]);\n\n  const [proteinObj, setProteinObj] = useState({\n    _id: 0,\n    name: \"\",\n    description: \"\",\n    mainImage: \"\",\n    createDate: \"\",\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getProteins();\n\n      if (result) {\n        setProteins(result);\n      }\n\n      const protCatResult = await getCategories();\n      if (protCatResult) {\n        setCategories(protCatResult.map(category => ({ label: category.name, value: category._id })))\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setProteinObj({\n        _id: 0,\n        name: \"\",\n        description: \"\",\n        mainImage: \"\",\n        createDate: \"\",\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const protein = proteins.find((u) => u._id === _id);\n    setProteinObj(protein);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setProteinObj(proteins.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / البروتينات</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        name={`حذف البروتينة رقم ${proteinObj._id}`}\n        onDelete={async () => {\n          if (await deleteProtein(proteinObj._id)) {\n            setProteins(proteins.filter((u) => u._id !== proteinObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          name: \"اضافة مقال جديد\",\n          onSave: async () => {\n            const protein = await addProtein(addFormRef);\n            if (protein) {\n              setProteins([...proteins, protein]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"اسم البروتين\",\n\n            props: {\n              type: \"text\",\n              name: \"name\",\n              maxLength: 100,\n              placeholder: \"اسم البروتين\",\n              required: true,\n              onChange: (e) =>\n                setProteinObj({ ...proteinObj, name: e.target.value }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"وصف البروتين\",\n            props: {\n              type: \"text\",\n              name: \"description\",\n              placeholder: \"وصف البروتين\",\n              required: true,\n\n              onChange: (e) =>\n                setProteinObj({ ...proteinObj, description: e.target.value }),\n            },\n          },\n          {\n            tag: \"select\",\n            label: \"القسم\",\n            props: {\n              name: \"categoryId\",\n              onChange: (e) => setProteinObj({ ...proteinObj, categoryId: e.target.value }),\n            },\n            options: categories,\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"mainImage\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n              multiple: true,\n\n              onChange: (e) =>\n                setProteinObj({ ...proteinObj, mainImage: e.target.files[0] }),\n            },\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          name: `تعديل المستخدم رقم ${proteinObj._id}`,\n          onSave: async () => {\n            const result = await editProtein(editFormRef);\n            console.log(\"result\", result)\n            if (result) {\n              setProteins(\n                proteins.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: proteinObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"اسم البروتين\",\n            props: {\n              type: \"text\",\n              value: proteinObj.name,\n              name: \"name\",\n              placeholder: \"اسم البروتين\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setProteinObj({ ...proteinObj, name: e.target.value }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"وصف البروتين\",\n            props: {\n              type: \"text\",\n              value: proteinObj.description,\n              name: \"description\",\n              placeholder: \"وصف البروتين\",\n              required: true,\n              onChange: (e) =>\n                setProteinObj({ ...proteinObj, description: e.target.value }),\n            },\n          },\n          {\n            tag: \"select\",\n            label: \"القسم\",\n            props: {\n              value: proteinObj?.categoryId?._id,\n              name: \"categoryId\",\n              onChange: (e) => setProteinObj({ ...proteinObj, categoryId: e.target.value }),\n            },\n            options: categories,\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"mainImage\",\n              multiple: true,\n              onChange: (e) =>\n                setProteinObj({\n                  ...proteinObj,\n                  mainImage: URL.createObjectURL(e.target.files[0]),\n                }),\n            },\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>البروتينات</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"الصورة المصغرة\",\n              \"اسم البروتين\",\n              \"وصف البروتين\",\n              \"القسم\",\n              \"تاريخ الإضافة\",\n            ]}\n            data={\n              proteins &&\n              proteins.map((u) => [\n                u._id,\n                { type: \"slider\", images: u.mainImage },\n                u.name,\n                u.description,\n                u.categoryId?.name,\n                u.createDate,\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Proteins;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Advertisements\\Advertisements.jsx",["350","351"],"import { useState, useEffect, useRef } from \"react\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\nimport {Helmet} from \"react-helmet\";\n\n//Hooks\nimport useAdvertisementsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Advertisements = () => {\n  const {\n    getAdvertisement,\n    deleteAdvertisement,\n    addAdvertisement,\n    editAdvertisement\n  } = useAdvertisementsHook();\n\n  const [advertisements, setAdvertisements] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [advertisementObj, setAdvertisementObj] = useState({\n    _id: 0,\n    image: \"\",\n    link: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getAdvertisement();\n\n      if (result) {\n        setAdvertisements(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setAdvertisementObj({\n        _id: 0,\n        image: \"\",\n        link: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = _id => {\n    const advertisement = advertisements.find(u => u._id === _id);\n    setAdvertisementObj(advertisement);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = _id => {\n    setAdvertisementObj(advertisements.find(u => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / الاعلانات</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف الاعلان رقم ${advertisementObj._id}`}\n        onDelete={async () => {\n          if (await deleteAdvertisement(advertisementObj._id)) {\n            setAdvertisements(advertisements.filter(u => u._id !== advertisementObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة اعلان جديد\",\n          onSave: async () => {\n            const advertisement = await addAdvertisement(addFormRef);\n\n            if (advertisement) {\n              setAdvertisements([...advertisements, advertisement]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"image\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n\n              onChange: e =>\n                setAdvertisementObj({ ...advertisementObj, image: e.target.files[0] })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الرابط\",\n\n            props: {\n              type: \"text\",\n              name: \"link\",\n              placeholder: \"الرابط\",\n              onChange: (e) =>\n              setAdvertisementObj({ ...advertisementObj, link: e.target.value }),\n            },\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل الاعلان رقم ${advertisementObj._id}`,\n          onSave: async () => {\n            const result = await editAdvertisement(editFormRef);\n            console.log(\"result\", result)\n            if (result) {\n              setAdvertisements(\n                advertisements.map(u => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: advertisementObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"image\",\n              onChange: e =>\n                setAdvertisementObj({\n                  ...advertisementObj,\n                  image: URL.createObjectURL(e.target.files[0])\n                })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الرابط\",\n\n            props: {\n              type: \"text\",\n              name: \"link\",\n              value: advertisementObj.link,\n              placeholder: \"الرابط\",\n              onChange: (e) =>\n              setAdvertisementObj({ ...advertisementObj, link: e.target.value }),\n            },\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>الاعلانات</h6>\n        </div>\n        <div className=\"container\">\n          {/* <SearchBox /> */}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete\n            }}\n            headers={[\n              \"#\",\n              \"صورة الاعلان\",\n              \"الرابط\"\n            ]}\n            data={\n              advertisements &&\n              advertisements.map(u => [\n                u._id,\n                { type: \"img\", src: u.image },\n                u.link || \"\"\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Advertisements;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Home\\Home.jsx",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Login\\Login.jsx",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ProteinCategory\\ProteinCategory.jsx",["352","353"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useProteinsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst ProteinsCategory = () => {\n  const {\n    getProteins,\n    deletePrtein,\n    addProtein,\n    editProtein\n  } = useProteinsHook();\n\n  const [products, setProducts] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [productObj, setProductObj] = useState({\n    _id: 0,\n    name: \"\",\n    image: \"\",\n    createDate: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getProteins();\n\n      if (result) {\n        setProducts(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setProductObj({\n        _id: 0,\n        name: \"\",\n        image: \"\",\n        createDate: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = _id => {\n    const product = products.find(u => u._id === _id);\n    setProductObj(product);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = _id => {\n    setProductObj(products.find(u => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / أقسام المكملات الغذائية</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف القسم رقم ${productObj._id}`}\n        onDelete={async () => {\n          if (await deletePrtein(productObj._id)) {\n            setProducts(products.filter(u => u._id !== productObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة قسم جديد\",\n          onSave: async () => {\n            const product = await addProtein(addFormRef);\n\n            if (product) {\n              setProducts([...products, product]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n\n            props: {\n              type: \"text\",\n              name: \"name\",\n              maxLength: 100,\n              placeholder: \"اسم القسم\",\n              required: true,\n              onChange: e =>\n                setProductObj({ ...productObj, name: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"image\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n\n              onChange: e =>\n                setProductObj({ ...productObj, image: e.target.files[0] })\n            }\n          }\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل القسم رقم ${productObj._id}`,\n          onSave: async () => {\n            const result = await editProtein(editFormRef);\n\n            if (result) {\n              setProducts(\n                products.map(u => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: productObj._id,\n              name: \"_id\"\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n            props: {\n              type: \"text\",\n              value: productObj.name,\n              name: \"name\",\n              placeholder: \"اسم القسم\",\n              required: true,\n              maxLength: 100,\n              onChange: e =>\n                setProductObj({ ...productObj, name: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"image\",\n              onChange: e =>\n                setProductObj({\n                  ...productObj,\n                  image: URL.createObjectURL(e.target.files[0])\n                })\n            }\n          }\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>أقسام المكملات الغذائية</h6>\n        </div>\n        <div className=\"container\">\n          {/* <SearchBox /> */}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete\n            }}\n            headers={[\n              \"#\",\n              \"صورة القسم\",\n              \"اسم القسم\",\n              \"تاريخ الإضافة\"\n            ]}\n            data={\n              products &&\n              products.map(u => [\n                u._id,\n                { type: \"img\", src: u.image },\n                u.name,\n                u.createDate\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ProteinsCategory;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Nutritions\\Nutritions.jsx",["354","355"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useNutritionMethodsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst NutritionMethods = () => {\n  const {\n    getNutritionMethods,\n    deleteNutritionMethod,\n    addNutritionMethod,\n    editNutritionMethod,\n  } = useNutritionMethodsHook();\n\n  const [nutritionMethods, setNutritionMethods] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [nutritionMethodObj, setNutritionMethodObj] = useState({\n    _id: 0,\n    name: \"\",\n    protein: 0,\n    fat: 0,\n    energy: 0,\n    carbs: 0\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getNutritionMethods();\n\n      if (result) {\n        setNutritionMethods(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setNutritionMethodObj({\n        _id: 0,\n        name: \"\",\n        protein: 0,\n        fat: 0,\n        energy: 0,\n        carbs: 0\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const nutritionMethod = nutritionMethods.find((u) => u._id === _id);\n    setNutritionMethodObj(nutritionMethod);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setNutritionMethodObj(nutritionMethods.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / القيم الغذائية</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف الأكلة رقم ${nutritionMethodObj._id}`}\n        onDelete={async () => {\n          if (await deleteNutritionMethod(nutritionMethodObj._id)) {\n            setNutritionMethods(\n              nutritionMethods.filter((u) => u._id !== nutritionMethodObj._id)\n            );\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة اكلة جديدة\",\n          onSave: async () => {\n            const nutritionMethod = await addNutritionMethod(addFormRef);\n            if (nutritionMethod) {\n              setNutritionMethods([...nutritionMethods, nutritionMethod]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"الاسم\",\n            props: {\n              type: \"text\",\n              name: \"name\",\n              placeholder: \"الاسم\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  name: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"البروتينات\",\n            props: {\n              type: \"number\",\n              name: \"protein\",\n              placeholder: \"البروتينات\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  protein: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الطاقة\",\n            props: {\n              type: \"number\",\n              name: \"energy\",\n              placeholder: \"الطاقة\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  energy: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الدهون\",\n            props: {\n              type: \"number\",\n              name: \"fat\",\n              placeholder: \"الدهون\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  fat: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الكربوهيدرات\",\n            props: {\n              type: \"text\",\n              name: \"carbs\",\n              placeholder: \"الكربوهيدرات\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  carbs: e.target.value,\n                }),\n            },\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          name: `تعديل الأكلة رقم ${nutritionMethodObj._id}`,\n          onSave: async () => {\n            const result = await editNutritionMethod(editFormRef);\n            if (result) {\n              setNutritionMethods(\n                nutritionMethods.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: nutritionMethodObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الاسم\",\n            props: {\n              type: \"text\",\n              value: nutritionMethodObj.name,\n              name: \"name\",\n              placeholder: \"الاسم\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  name: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"البروتينات\",\n            props: {\n              type: \"number\",\n              value: nutritionMethodObj.protein,\n              name: \"protein\",\n              placeholder: \"البروتينات\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  protein: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الطاقة\",\n            props: {\n              type: \"number\",\n              value: nutritionMethodObj.energy,\n              name: \"energy\",\n              placeholder: \"الطاقة\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  energy: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الدهون\",\n            props: {\n              type: \"number\",\n              value: nutritionMethodObj.fat,\n              name: \"fat\",\n              placeholder: \"الدهون\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  fat: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الكربوهيدرات\",\n            props: {\n              type: \"text\",\n              value: nutritionMethodObj.carbs,\n              name: \"carbs\",\n              placeholder: \"الكربوهيدرات\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNutritionMethodObj({\n                  ...nutritionMethodObj,\n                  carbs: e.target.value,\n                }),\n            },\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>القيم الغذائية</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\"#\", \"الاسم\", \"البروتينات\", \"الطاقة\", \"الدهون\", \"الكربوهيدرات\"]}\n            data={\n              nutritionMethods &&\n              nutritionMethods.map((u) => [\n                u._id,\n                u.name,\n                u.protein,\n                u.energy,\n                u.fat,\n                u.carbs,\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NutritionMethods;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\config.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Users\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Articles\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Advertisements\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Proteins\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\PaymentMethods\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Halls\\hooks\\index.js",["356","357","358","359"],"import axios from \"axios\";\nimport { useNotifierContext } from \"../../../providers\";\n\nconst useHallsHook = () => {\n  const { setNotifiers } = useNotifierContext();\n\n  const getHalls = async () => {\n    try {\n      let response = await axios.post(\"/api/halls/get\", { type: 1 });\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      console.log(data);\n      return data.halls;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  /******************************************************/\n\n  const deleteHall = async (_id) => {\n    try {\n      let response = await axios.post(\"/api/halls/delete\", {\n        _id,\n        type: 1,\n      });\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return true;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  /******************************************************/\n\n  const addHall = async (formRef) => {\n    try {\n      let hallData = new FormData(formRef.current);\n      console.log(hallData.get(\"name\"));\n\n      let subscriptions = hallData.get(\"subscriptions\"),\n        name = hallData.get(\"name\"),\n        city = hallData.get(\"city\"),\n        brief = hallData.get(\"brief\"),\n        lng = hallData.get(\"lng\"),\n        lat = hallData.get(\"lat\"),\n        images = hallData.get(\"images\");\n      //Manibulate subscriptions\n      subscriptions = subscriptions.split(\"\\n\");\n      subscriptions = subscriptions.map((s) => ({\n        name: s.split(\",\")[1],\n        price: s.split(\",\")[0],\n      }));\n      hallData.set(\"subscriptions\", JSON.stringify(subscriptions));\n\n      let location = { lng: lng, lat: lat };\n      hallData.location = location;\n\n      let response = await axios.post(\"/api/halls/add\", hallData);\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return data.hall;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n  /******************************************************/\n\n  const editHall = async (formRef) => {\n    try {\n      let hallData = new FormData(formRef.current);\n\n      let response = await axios.post(\"/api/halls/edit\", hallData);\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return data.hall;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return {\n    getHalls,\n    deleteHall,\n    addHall,\n    editHall,\n  };\n};\n\nexport default useHallsHook;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Orders\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\VideoExercisesCategory\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ImageExercisesCategory\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ProductsCategory\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Products\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\VideoExercises\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ProteinCategory\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\ImageExercises\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Nutritions\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\MapSearchBox\\MapSearchBox.jsx",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Diets\\Diets.jsx",["360","361"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\r\n\r\n//Hooks\r\nimport useDietsHook from \"./hooks/index\";\r\n\r\n//Styles\r\nimport \"./style.scss\";\r\n\r\nconst Diets = () => {\r\n  const {\r\n    getDiets,\r\n    deleteDiet,\r\n    addDiet,\r\n    editDiet,\r\n  } = useDietsHook();\r\n\r\n  const [diets, setDiets] = useState([]);\r\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\r\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\r\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\r\n\r\n  const [dietObj, setdietObj] = useState({\r\n    _id: 0,\r\n    name: \"\",\r\n    ingredients: \"\",\r\n    preparation:\"\",\r\n    foodValue:\"\",\r\n    images: [],\r\n    createDate: \"\",\r\n  });\r\n\r\n  const addFormRef = useRef(null);\r\n  const editFormRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const result = await getDiets();\r\n\r\n      if (result) {\r\n        setDiets(result);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (addBoxVisible)\r\n      setdietObj({\r\n        _id: 0,\r\n        name: \"\",\r\n        ingredients: \"\",\r\n        mainImage: \"\",\r\n        createDate: \"\",\r\n      });\r\n  }, [addBoxVisible]);\r\n\r\n  const onClickEdit = (_id) => {\r\n    const article = diets.find((u) => u._id === _id);\r\n    setdietObj(article);\r\n    setEditBoxVisible(true);\r\n  };\r\n  const onClickDelete = (_id) => {\r\n    setdietObj(diets.find((u) => u._id === _id));\r\n    setDeleteBoxVisible(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>لوحة التحكم/ اكلات دايت</title>\r\n      </Helmet>\r\n      <DeleteBox\r\n        visible={deleteBoxVisible}\r\n        setVisible={setDeleteBoxVisible}\r\n        title={`حذف المقالة رقم ${dietObj._id}`}\r\n        onDelete={async () => {\r\n          console.log(\"cccccccc \" + addFormRef)\r\n          if (await deleteDiet(dietObj._id)) {\r\n            setDiets(diets.filter((u) => u._id !== dietObj._id));\r\n            setDeleteBoxVisible(false);\r\n          }\r\n        }}\r\n      />\r\n      <DataBox\r\n        visible={addBoxVisible}\r\n        setVisible={setAddBoxVisible}\r\n        options={{\r\n          title: \"اضافة مقال جديد\",\r\n          onSave: async () => {\r\n            console.log(addFormRef)\r\n            const diet = await addDiet(addFormRef);\r\n            if (diet) {\r\n              setDiets([...diets, diet]);\r\n              setAddBoxVisible(false);\r\n            }\r\n          },\r\n          btnSave: \"اضافة\",\r\n          formRef: addFormRef,\r\n        }}\r\n        inputs={[\r\n          {\r\n            tag: \"input\",\r\n            label: \"اسم الاكلة \",\r\n\r\n            props: {\r\n              type: \"text\",\r\n              name: \"name\",\r\n              maxLength: 100,\r\n              placeholder: \" اسم الاكلة\",\r\n              required: true,\r\n              onChange: (e) =>\r\n                setdietObj({ ...dietObj, name: e.target.value }),\r\n            },\r\n          },\r\n          {\r\n            tag: \"textarea\",\r\n            label: \" المكونات\",\r\n            props: {\r\n              type: \"text\",\r\n              name: \"ingredients\",\r\n              placeholder: \" المكونات\",\r\n              required: true,\r\n\r\n              onChange: (e) =>\r\n                setdietObj({ ...dietObj, ingredients: e.target.value }),\r\n            },\r\n          },\r\n\r\n          {\r\n            tag: \"textarea\",\r\n            label: \" طريقة التحضير\",\r\n            props: {\r\n              type: \"text\",\r\n              name: \"preparation\",\r\n              placeholder: \" طريقة التحضير\",\r\n              required: true,\r\n\r\n              onChange: (e) =>\r\n                setdietObj({ ...dietObj, preparation: e.target.value }),\r\n            },\r\n          },\r\n          \r\n          {\r\n            tag: \"textarea\",\r\n            label: \" القيمة الغذائية\",\r\n            props: {\r\n              type: \"text\",\r\n              name: \"foodValue\",\r\n              placeholder: \" القيمة الغذائية\",\r\n              required: true,\r\n\r\n              onChange: (e) =>\r\n                setdietObj({ ...dietObj, foodValue: e.target.value }),\r\n            },\r\n          },\r\n\r\n          {\r\n            tag: \"input\",\r\n            label: \"الصور\",\r\n            props: {\r\n              type: \"file\",\r\n              accept: \".jpg, .png, .jpeg\",\r\n              name: \"images\",\r\n              placeholder: \"الصور\",\r\n              multiple: true,\r\n              required: true,\r\n\r\n              onChange: (e) =>\r\n                setdietObj({\r\n                  ...dietObj,\r\n                  images: e.target.files,\r\n                }),\r\n            },\r\n          },\r\n          \r\n        ]}\r\n      />\r\n      <DataBox\r\n        visible={editBoxVisible}\r\n        setVisible={setEditBoxVisible}\r\n        options={{\r\n          title: `تعديل الاكلة رقم ${dietObj._id}`,\r\n          onSave: async () => {\r\n            const result = await editDiet(editFormRef);\r\n            if (result) {\r\n              setDiets(\r\n                diets.map((u) => (u._id === result._id ? result : u))\r\n              );\r\n              setEditBoxVisible(false);\r\n            }\r\n          },\r\n          saveBtn: \"تعديل\",\r\n          formRef: editFormRef,\r\n          images: dietObj.mainImage,\r\n        }}\r\n        inputs={[\r\n          {\r\n            tag: \"input\",\r\n            props: {\r\n              type: \"hidden\",\r\n              value: dietObj._id,\r\n              name: \"_id\",\r\n            },\r\n          },\r\n          {\r\n            tag: \"input\",\r\n            label: \"اسم الاكلة \",\r\n            props: {\r\n              type: \"text\",\r\n              value: dietObj.name,\r\n              name: \"name\",\r\n              placeholder: \" اسم الاكلة\",\r\n              required: true,\r\n              maxLength: 100,\r\n              onChange: (e) =>\r\n                setdietObj({ ...dietObj, name: e.target.value }),\r\n            },\r\n          },\r\n          {\r\n            tag: \"textarea\",\r\n            label: \" المكونات\",\r\n            props: {\r\n              type: \"text\",\r\n              value: dietObj.ingredients,\r\n              name: \"ingredients\",\r\n              placeholder: \"المكونات \",\r\n              required: true,\r\n              onChange: (e) =>\r\n                setdietObj({ ...dietObj, ingredients: e.target.value }),\r\n            },\r\n          },\r\n          {\r\n            tag: \"textarea\",\r\n            label: \" طريقة التحضير\",\r\n            props: {\r\n              type: \"text\",\r\n              value: dietObj.preparation,\r\n              name: \"preparation\",\r\n              placeholder: \"طريقة التحضير \",\r\n              required: true,\r\n              onChange: (e) =>\r\n                setdietObj({ ...dietObj, preparation: e.target.value }),\r\n            },\r\n          },\r\n\r\n          {\r\n            tag: \"textarea\",\r\n            label: \" القيمة الغذائية\",\r\n            props: {\r\n              type: \"text\",\r\n              value: dietObj.foodValue,\r\n              name: \"foodValue\",\r\n              placeholder: \"القيمة الغذائية \",\r\n              required: true,\r\n              onChange: (e) =>\r\n                setdietObj({ ...dietObj, foodValue: e.target.value }),\r\n            },\r\n          },\r\n\r\n          {\r\n            tag: \"input\",\r\n            label: \"الصور \",\r\n            props: {\r\n              type: \"file\",\r\n              accept: \".jpg, .png, .jpeg\",\r\n              placeholder: \"الصورة المصغرة\",\r\n              name: \"images\",\r\n              multiple: true,\r\n              onChange: (e) =>\r\n                setdietObj({\r\n                  ...dietObj,\r\n                  images: URL.createObjectURL(e.target.files[0]),\r\n                }),\r\n            },\r\n          },\r\n        ]}\r\n      />\r\n      <div className=\"main-container\">\r\n        <div className=\"page-position\">\r\n          <h2>لوحة التحكم</h2>\r\n          <p>/</p>\r\n          <h6> اكلات دايت</h6>\r\n        </div>\r\n        <div className=\"container\">\r\n          {/*<SearchBox />*/}\r\n          <div className=\"add-new\">\r\n            <button\r\n              className=\"btn-add-new\"\r\n              onClick={() => setAddBoxVisible(true)}\r\n            >\r\n              أضف جديد\r\n            </button>\r\n          </div>\r\n          <Table\r\n            actions={{\r\n              edit: onClickEdit,\r\n              delete: onClickDelete,\r\n            }}\r\n            headers={[\r\n              \"#\",\r\n              \"اسم الاكلة\",\r\n              \" الصور\",\r\n              \" المكونات\",\r\n        \r\n              \"طريقة التحضير\",\r\n              \"القيمة الغذائية\",\r\n              \r\n              \"تاريخ الإضافة\",\r\n            ]}\r\n            data={\r\n              diets &&\r\n              diets.map((u) => [\r\n                u._id,\r\n                u.name,\r\n                { type: \"slider\", images: u.images },\r\n                u.ingredients,\r\n                u.preparation,\r\n                u.foodValue,\r\n                u.createDate,\r\n              ])\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Diets;\r\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Diets\\hooks\\index.js",["362","363","364","365"],"import axios from \"axios\";\nimport { useNotifierContext } from \"../../../providers\";\n\nconst useDietsHook = () => {\n  const { setNotifiers } = useNotifierContext();\n\n  const getDiets = async () => {\n    try {\n      let response = await axios.post(\"/api/diets/get\");\n      let data = await response.data;\n\n      console.log(data);\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      return data.diets;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  /******************************************************/\n\n  const deleteDiet = async (_id) => {\n    try {\n      let response = await axios.post(\"/api/diets/delete\", { _id });\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return true;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  /******************************************************/\n\n  const addDiet = async (formRef) => {\n    try {\n      let dietData = new FormData(formRef.current);\n\n      console.log(\"vvvvvvvvvvvvvvvvvvvvvvvvv\");\n      console.log(dietData.get(\"name\"));\n\n      let name = dietData.get(\"name\"),\n        ingredients = dietData.get(\"ingredients\"),\n        preparation = dietData.get(\"preparation\"),\n        foodValue = dietData.get(\"foodValue\"),\n        images = dietData.get(\"images\");\n\n      console.log(name);\n      let response = await axios.post(\"/api/diets/add\", dietData);\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return data.hall;\n    } catch (e) {\n      alert(e.message);\n    }\n\n    // try {\n    //   let articleData = new FormData(formRef.current);\n\n    //   let response = await axios.post(\"/api/articles/add\", articleData);\n    //   let data = await response.data;\n\n    //   if (!data.status) {\n    //     setNotifiers({ errors: data.errors });\n    //     return false;\n    //   }\n    //   setNotifiers({ success: data.messages });\n    //   return data.article;\n    // } catch (e) {\n    //   alert(e.message);\n    // }\n  };\n  /******************************************************/\n\n  const editDiet = async (formRef) => {\n    try {\n      let dietData = new FormData(formRef.current);\n\n      let response = await axios.post(\"/api/diets/edit\", dietData);\n      let data = await response.data;\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return data.diet;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return {\n    getDiets,\n    deleteDiet,\n    addDiet,\n    editDiet,\n  };\n};\n\nexport default useDietsHook;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Barcodes\\Barcodes.jsx",["366","367"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useArticlesHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Barcodes = () => {\n  const {\n     getBarcodes,\n    deleteBarcode,\n    addBarcode,\n    editBarcode,\n  } = useArticlesHook();\n\n  const [barcodes, setBarcodes] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [barcodeObj, setBarcodeObj] = useState({\n    _id: 0,\n    name:\"\",\n    code:\"\",\n    type:\"\",\n    protein: 0,\n    fat: 0,\n    energy: 0,\n    carbs: 0,\n    mainImage: \"\",\n    createDate: \"\",\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getBarcodes();\n\n      if (result) {\n        setBarcodes(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setBarcodeObj({\n        _id: 0,\n        name:\"\",\n        code:\"\",\n        type:\"\",\n        weight:0,\n        protein: 0,\n        fat: 0,\n        energy: 0,\n        carbs: 0,\n        mainImage: \"\",\n        createDate: \"\",\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const barcode = barcodes.find((u) => u._id === _id);\n    setBarcodeObj(barcode);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setBarcodeObj(barcodes.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / البحث عن طريق الباركود</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف باركود رقم ${barcodeObj._id}`}\n        onDelete={async () => {\n          if (await deleteBarcode(barcodeObj._id)) {\n            setBarcodes(barcodes.filter((u) => u._id !== barcodeObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة باركود جديد\",\n          onSave: async () => {\n            const article = await addBarcode(addFormRef);\n            if (article) {\n              setBarcodes([...barcodes, article]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n            {\n              tag: \"input\",\n              label: \"الاسم\",\n              props: {\n                type: \"text\",\n                name: \"name\",\n                placeholder: \"الاسم\",\n                required: true,\n                maxLength: 100,\n                onChange: (e) =>\n                setBarcodeObj({\n                    ...barcodeObj,\n                    name: e.target.value,\n                  }),\n              },\n            },\n            {\n              tag: \"input\",\n              label: \"الباركود\",\n              props: {\n                type: \"text\",\n                name: \"code\",\n                placeholder: \"الباركود\",\n                required: true,\n                maxLength: 100,\n                onChange: (e) =>\n                setBarcodeObj({\n                    ...barcodeObj,\n                    code: e.target.value,\n                  }),\n              },\n            },\n\n            {\n              tag: \"input\",\n              label: \"نوع  الباركود\",\n              props: {\n                type: \"text\",\n                name: \"type\",\n                placeholder: \"نوع  الباركود\",\n                required: true,\n                maxLength: 100,\n                onChange: (e) =>\n                setBarcodeObj({\n                    ...barcodeObj,\n                    type: e.target.value,\n                  }),\n              },\n            },\n\n            {\n              tag: \"input\",\n              label: \"الوزن\",\n              props: {\n                type: \"number\",\n                name: \"weight\",\n                placeholder: \"الوزن\",\n                required: true,\n                maxLength: 100,\n                onChange: (e) =>\n                setBarcodeObj({\n                    ...barcodeObj,\n                    weight: e.target.value,\n                  }),\n              },\n            },\n\n            {\n              tag: \"input\",\n              label: \"البروتينات\",\n              props: {\n                type: \"number\",\n                name: \"protein\",\n                placeholder: \"البروتينات\",\n                required: true,\n                maxLength: 100,\n                onChange: (e) =>\n                setBarcodeObj({\n                    ...barcodeObj,\n                    protein: e.target.value,\n                  }),\n              },\n            },\n            {\n              tag: \"input\",\n              label: \"الطاقة\",\n              props: {\n                type: \"number\",\n                name: \"energy\",\n                placeholder: \"الطاقة\",\n                required: true,\n                maxLength: 100,\n                onChange: (e) =>\n                setBarcodeObj({\n                    ...barcodeObj,\n                    energy: e.target.value,\n                  }),\n              },\n            },\n            {\n              tag: \"input\",\n              label: \"الدهون\",\n              props: {\n                type: \"number\",\n                name: \"fat\",\n                placeholder: \"الدهون\",\n                required: true,\n                maxLength: 100,\n                onChange: (e) =>\n                setBarcodeObj({\n                    ...barcodeObj,\n                    fat: e.target.value,\n                  }),\n              },\n            },\n            {\n              tag: \"input\",\n              label: \"الكربوهيدرات\",\n              props: {\n                type: \"number\",\n                name: \"carbs\",\n                placeholder: \"الكربوهيدرات\",\n                required: true,\n                maxLength: 100,\n                onChange: (e) =>\n                setBarcodeObj({\n                    ...barcodeObj,\n                    carbs: e.target.value,\n                  }),\n              },\n            },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"mainImage\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n              multiple: true,\n\n              onChange: (e) =>\n                setBarcodeObj({ ...barcodeObj, mainImage: e.target.files[0] }),\n            },\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل باركود رقم ${barcodeObj._id}`,\n          onSave: async () => {\n            const result = await editBarcode(editFormRef);\n            if (result) {\n              setBarcodes(\n                barcodes.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n          images: barcodeObj.mainImage,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: barcodeObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الاسم \",\n            props: {\n              type: \"text\",\n              value: barcodeObj.name,\n              name: \"name\",\n              placeholder: \" الاسم\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setBarcodeObj({ ...barcodeObj, name: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الباركود \",\n            props: {\n              type: \"text\",\n              value: barcodeObj.code,\n              name: \"code\",\n              placeholder: \" الباركود\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setBarcodeObj({ ...barcodeObj, code: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"نوع الباركود \",\n            props: {\n              type: \"text\",\n              value: barcodeObj.type,\n              name: \"type\",\n              placeholder: \" نوع الباركود\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setBarcodeObj({ ...barcodeObj, type: e.target.value }),\n            },\n          },\n\n          {\n            tag: \"input\",\n            label: \"الوزن\",\n            props: {\n              type: \"number\",\n              value: barcodeObj.weight,\n              name: \"weight\",\n              placeholder: \"الوزن\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n              setBarcodeObj({\n                  ...barcodeObj,\n                  weight: e.target.value,\n                }),\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"البروتينات\",\n            props: {\n              type: \"number\",\n              value: barcodeObj.protein,\n              name: \"protein\",\n              placeholder: \"البروتينات\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setBarcodeObj({\n                  ...barcodeObj,\n                  protein: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الطاقة\",\n            props: {\n              type: \"number\",\n              value: barcodeObj.energy,\n              name: \"energy\",\n              placeholder: \"الطاقة\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n              setBarcodeObj({\n                  ...barcodeObj,\n                  energy: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الدهون\",\n            props: {\n              type: \"number\",\n              value: barcodeObj.fat,\n              name: \"fat\",\n              placeholder: \"الدهون\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n              setBarcodeObj({\n                  ...barcodeObj,\n                  fat: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الكربوهيدرات\",\n            props: {\n              type: \"text\",\n              value: barcodeObj.carbs,\n              name: \"carbs\",\n              placeholder: \"الكربوهيدرات\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setBarcodeObj({\n                  ...barcodeObj,\n                  carbs: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"mainImage\",\n              multiple: true,\n              onChange: (e) =>\n                setBarcodeObj({\n                  ...barcodeObj,\n                  mainImage: URL.createObjectURL(e.target.files[0]),\n                }),\n            },\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>البحث عن طريق الباركود</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"الاسم \",\n              \"الصورة المصغرة\",\n              \"الباركود \",\n              \"الوزن\",\n              \"نوع الباركود \",\n              \"البروتينات \",\n              \" الطاقة\",\n              \" الدهون\",\n              \" الكربوهيدرات\",\n              \"تاريخ الإضافة\",\n              \n            ]}\n            data={\n              barcodes &&\n              barcodes.map((u) => [\n                u._id,\n                u.name,\n                { type: \"slider\", images: u.mainImage },\n                u.code,\n                u.type,\n                u.weight,\n                u.protein,\n                u.energy,\n                u.fat,\n                u.carbs,\n                u.createDate\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Barcodes;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Barcodes\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Notifications\\Notifications.jsx",["368","369","370","371","372","373","374","375","376","377","378"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useNotificationsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Notifications = () => {\n  const {\n    getNotification,\n    deleteNotification,\n    sendNotification,\n    editNotification,\n  } = useNotificationsHook();\n\n  const [notifications, setNotifications] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [notificationObj, setNotificationObj] = useState({\n    _id: 0,\n    title: \"\",\n    body: \"\",\n //   data: \"\",\n    createDate: \"\",\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getNotification();\n\n      if (result) {\n        setNotifications(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setNotificationObj({\n        _id: 0,\n        title: \"\",\n        body: \"\",\n     //   data: \"\",\n        createDate: \"\",\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const notification = notifications.find((u) => u._id === _id);\n    setNotificationObj(notification);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setNotificationObj(notifications.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / إشعار</title>\n      </Helmet>\n      {/* <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف إشعار رقم ${notificationObj._id}`}\n        onDelete={async () => {\n          if (await deleteNotificatio(notificationObj._id)) {\n            setNotifications(notifications.filter((u) => u._id !== notificationObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      /> */}\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"  إرسال إشعار\",\n          onSave: async () => {\n            const not = await sendNotification(addFormRef);\n            if (not) {\n              setNotifications([...notifications, not]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"إرسال إشعار\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"عنوان إشعار\",\n\n            props: {\n              type: \"text\",\n              name: \"title\",\n              maxLength: 100,\n              placeholder: \"عنوان إشعار\",\n              required: true,\n              onChange: (e) =>\n                setNotificationObj({ ...notificationObj, title: e.target.value }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي إشعار\",\n            props: {\n              type: \"text\",\n              name: \"body\",\n              placeholder: \"محتوي إشعار\",\n              required: true,\n\n              onChange: (e) =>\n                setNotificationObj({ ...notificationObj, body: e.target.value }),\n            },\n          },\n          // {\n          //   tag: \"textarea\",\n          //   label: \"محتوي إشعار\",\n          //   props: {\n          //     type: \"text\",\n          //     name: \"data\",\n          //     placeholder: \"الداتا \",\n          //     required: true,\n\n          //     onChange: (e) =>\n          //       setNotificationObj({ ...notificationObj, data: e.target.value }),\n          //   },\n          // },\n\n        ]}\n      />\n      {/* <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل المقال رقم ${notificationObj._id}`,\n          onSave: async () => {\n            const result = await editArticle(editFormRef);\n            if (result) {\n              setNotifications(\n                notifications.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n          images: notificationObj.mainImage,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: notificationObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"عنوان المقال\",\n            props: {\n              type: \"text\",\n              value: notificationObj.title,\n              name: \"title\",\n              placeholder: \"عنوان المقال\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNotificationObj({ ...notificationObj, title: e.target.value }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي المقال\",\n            props: {\n              type: \"text\",\n              value: notificationObj.content,\n              name: \"content\",\n              placeholder: \"محتوي المقال\",\n              required: true,\n              onChange: (e) =>\n                setNotificationObj({ ...notificationObj, content: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"mainImage\",\n              multiple: true,\n              onChange: (e) =>\n                setNotificationObj({\n                  ...notificationObj,\n                  mainImage: URL.createObjectURL(e.target.files[0]),\n                }),\n            },\n          },\n        ]}\n      /> */}\n\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>المقالات</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          {/* <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"الصورة المصغرة\",\n              \"عنوان المقال\",\n              \"محتوي المقال\",\n              \"تاريخ الإضافة\",\n            ]}\n            data={\n              notifications &&\n              notifications.map((u) => [\n                u._id,\n                { type: \"slider\", images: u.mainImage },\n                u.title,\n                u.content,\n                u.createDate,\n              ])\n            }\n          /> */}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Notifications;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Notifications\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Questions\\Questions.jsx",["379","380","381","382","383"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\r\nimport QuestionTable from \"../../components/Table/QuestionTable\";\r\n\r\n//Hooks\r\nimport useDietsHook from \"./hooks/index\";\r\n\r\n//Styles\r\nimport \"./style.scss\";\r\n\r\nconst Questions = () => {\r\n  const {\r\n    getQuestions,\r\n    deleteQuestion,\r\n    deleteAnswer\r\n  } = useDietsHook();\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n\r\n  const [answers, setAnswers] = useState([]);\r\n\r\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\r\n\r\n  const [deleteBoxVisibleAnswers, setDeleteBoxVisibleAnswers] = useState(false)\r\n  const [answersVisible, setAnswersVisible] = useState(false)\r\n  const [questionsVisible, setQuestionsVisible] = useState(true)\r\n\r\n  const [questionId, setQuestionId] = useState(0)\r\n\r\n\r\n  const [questionObj, setQuestionObj] = useState({\r\n    _id: 0,\r\n    question: \"\",\r\n    time: \"\",\r\n  });\r\n\r\n  const [answernObj, setAnswerObj] = useState({\r\n    _id: 0,\r\n    questionId:0\r\n  });\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const result = await getQuestions();\r\n\r\n      if (result) {\r\n        setQuestions(result);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n\r\n  const onClickEdit = (_id) => {\r\n    const question = questions.find((u) => u._id === _id);\r\n    setQuestionId(question._id)\r\n    const a = question.answers;\r\n     setAnswers(a)\r\n    setQuestionsVisible(false)\r\n    setAnswersVisible(true);\r\n\r\n  };\r\n\r\n  const onClickDelete = (_id) => {\r\n    setQuestionObj(questions.find((u) => u._id === _id));\r\n    setDeleteBoxVisible(true);\r\n  };\r\n\r\n  const onClickDeleteAnswer = (_id) => {\r\n\r\n    const a = answers.find((u) => u._id === _id)\r\n\r\n    setAnswerObj({_id:_id,questionId:questionId});\r\n\r\n    setDeleteBoxVisibleAnswers(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>لوحة التحكم/ الاسئله</title>\r\n      </Helmet>\r\n      <DeleteBox\r\n        visible={deleteBoxVisible}\r\n        setVisible={setDeleteBoxVisible}\r\n        title={`حذف السؤال رقم ${questionObj._id}`}\r\n        onDelete={async () => {\r\n        \r\n          if (await deleteQuestion(questionObj._id)) {\r\n            setQuestions(questions.filter((u) => u._id !== questionObj._id));\r\n            setDeleteBoxVisible(false);\r\n          }\r\n        }}\r\n      />\r\n\r\n      {/* delete box for answers */}\r\n\r\n      <DeleteBox\r\n        visible={deleteBoxVisibleAnswers}\r\n        setVisible={setDeleteBoxVisibleAnswers}\r\n        title={`حذف الجواب رقم ${answernObj._id}`}\r\n        onDelete={async () => {\r\n        \r\n          if (await deleteAnswer(answernObj)) {\r\n            setAnswers(answers.filter((u) => u._id !== answernObj._id));\r\n            setDeleteBoxVisibleAnswers(false);\r\n          }\r\n        }}\r\n      />\r\n\r\n<div className=\"main-container\">\r\n        <div className=\"page-position\">\r\n          <h2>لوحة التحكم</h2>\r\n          <p>/</p>\r\n          <h6>  الاسئله</h6>\r\n        </div>\r\n    \r\n{ questionsVisible ?    \r\n\r\n        <div className=\"container\">\r\n          {/*<SearchBox />*/}\r\n          <QuestionTable\r\n            actions={{\r\n              edit: onClickEdit,\r\n              delete: onClickDelete,\r\n            }}\r\n            headers={[\r\n              \"#\",\r\n              \" السؤال\",                    \r\n              \"تاريخ الإضافة\",\r\n           \r\n            ]}\r\n            data={\r\n              questions &&\r\n              questions.map((u) => [\r\n                u._id,\r\n                u.question,\r\n                u.time,\r\n                \r\n              ])\r\n            }\r\n          />\r\n        </div>  : \"\"}\r\n\r\n        {/* answers */}\r\n\r\n        {\r\n   answersVisible ? \r\n\r\n        \r\n    <div className=\"container\">\r\n\r\n<div className=\"add-new\">\r\n            <button\r\n              className=\"btn-add-new\"\r\n              onClick={() => {setAnswersVisible(false); setQuestionsVisible(true)}}\r\n            >\r\n             الرجوع الى الاسئلة\r\n            </button>\r\n          </div>\r\n          \r\n          <Table\r\n            actions={{\r\n              \r\n               delete: onClickDeleteAnswer,\r\n            }}\r\n            headers={[\r\n              \"#\",\r\n              \" الجواب\",  \r\n              \"تاريخ الإضافة\"                 \r\n            ]}\r\n            data={\r\n              answers &&\r\n              answers.map((u,i) => [\r\n              \r\n                u._id,\r\n                u.answer,\r\n                u.time,\r\n                \r\n              ])\r\n            }\r\n            \r\n          />\r\n        </div>\r\n         : \"\" }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\Questions\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\HomeExercicesCategories\\HomeExercisesCategory.jsx",["384","385"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useProductsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst HomeExercicesCategory = () => {\n  const {\n    getProducts,\n    deleteProduct,\n    addProduct,\n    editProduct\n  } = useProductsHook();\n\n  const [products, setProducts] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [productObj, setProductObj] = useState({\n    _id: 0,\n    name: \"\",\n    price: \"\",\n    description: \"\",\n    coachBrief: \"\",\n    image: \"\",\n    createDate: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getProducts();\n\n      if (result) {\n        setProducts(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setProductObj({\n        _id: 0,\n        name: \"\",\n        price: \"\",\n        description: \"\",\n        coachBrief: \"\",\n        image: \"\",\n        createDate: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = _id => {\n    const product = products.find(u => u._id === _id);\n    setProductObj(product);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = _id => {\n    setProductObj(products.find(u => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / أقسام التمارين المنزليه</title>\n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف القسم رقم ${productObj._id}`}\n        onDelete={async () => {\n          if (await deleteProduct(productObj._id)) {\n            setProducts(products.filter(u => u._id !== productObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة قسم جديد\",\n          onSave: async () => {\n            const product = await addProduct(addFormRef);\n\n            if (product) {\n              setProducts([...products, product]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n\n            props: {\n              type: \"text\",\n              name: \"name\",\n              maxLength: 100,\n              placeholder: \"اسم القسم\",\n              required: true,\n              onChange: e =>\n                setProductObj({ ...productObj, name: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"image\",\n              placeholder: \"الصورة المصغرة\",\n              required: true,\n\n              onChange: e =>\n                setProductObj({ ...productObj, image: e.target.files[0] })\n            }\n          }\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل القسم رقم ${productObj._id}`,\n          onSave: async () => {\n            const result = await editProduct(editFormRef);\n\n            if (result) {\n              setProducts(\n                products.map(u => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: productObj._id,\n              name: \"_id\"\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"اسم القسم\",\n            props: {\n              type: \"text\",\n              value: productObj.name,\n              name: \"name\",\n              placeholder: \"اسم القسم\",\n              required: true,\n              maxLength: 100,\n              onChange: e =>\n                setProductObj({ ...productObj, name: e.target.value })\n            }\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"image\",\n              onChange: e =>\n                setProductObj({\n                  ...productObj,\n                  image: URL.createObjectURL(e.target.files[0])\n                })\n            }\n          }\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>أقسام التمارين المنزليه</h6>\n        </div>\n        <div className=\"container\">\n          {/* <SearchBox /> */}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete\n            }}\n            headers={[\n              \"#\",\n              \"صورة القسم\",\n              \"اسم القسم\",\n              \"تاريخ الإضافة\"\n            ]}\n            data={\n              products &&\n              products.map(u => [\n                u._id,\n                { type: \"img\", src: u.image },\n                u.name,\n                u.createDate\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default HomeExercicesCategory;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\HomeExercicesCategories\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\HomeExercices\\HomeExercises.jsx",["386","387"],"import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useImageExercisesHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst HomeExercises = () => {\n  const {\n    getImageExercises,\n    deleteImageExercise,\n    addImageExercise,\n    editImageExercise,\n    getCategories\n  } = useImageExercisesHook();\n\n  const [imageExercises, setImageExercises] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [imageExerciseObj, setImageExerciseObj] = useState({\n    _id: 0,\n    title: \"\",\n    description: \"\",\n    images: [],\n    createDate: \"\",\n    categoryId: \"\"\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getImageExercises();\n\n      if (result) {\n        setImageExercises(result);\n      }\n      const catResult = await getCategories();\n      if (catResult) {\n        setCategories(catResult.map(category => ({ label: category.name, value: category._id })))\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setImageExerciseObj({\n        _id: 0,\n        title: \"\",\n        description: \"\",\n        images: [],\n        createDate: \"\",\n        categoryId: \"\"\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const imageExercise = imageExercises.find((u) => u._id === _id);\n    setImageExerciseObj(imageExercise);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setImageExerciseObj(imageExercises.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / تمارين رياضية</title> \n      </Helmet>\n      <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف التمرين رقم ${imageExerciseObj._id}`}\n        onDelete={async () => {\n          if (await deleteImageExercise(imageExerciseObj._id)) {\n            setImageExercises(\n              imageExercises.filter((u) => u._id !== imageExerciseObj._id)\n            );\n            setDeleteBoxVisible(false);\n          }\n        }}\n      />\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"اضافة تمرين جديد\",\n          onSave: async () => {\n            const imageExercise = await addImageExercise(addFormRef);\n            if (imageExercise) {\n              setImageExercises([...imageExercises, imageExercise]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"اضافة\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"عنوان التمرين\",\n\n            props: {\n              type: \"text\",\n              name: \"title\",\n              maxLength: 100,\n              placeholder: \"عنوان التمرين\",\n              required: true,\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  title: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"select\",\n            label: \"القسم\",\n            props: {\n              name: \"categoryId\",\n              onChange: (e) => setImageExerciseObj({ ...imageExerciseObj, categoryId: e.target.value }),\n            },\n            options: categories,\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي التمرين\",\n            props: {\n              type: \"text\",\n              name: \"description\",\n              placeholder: \"محتوي التمرين\",\n              required: true,\n\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  description: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصور\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              name: \"images\",\n              placeholder: \"الصور\",\n              multiple: true,\n              required: true,\n\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  images: e.target.files,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              name: \"type\",\n              type: \"hidden\",\n              value: 1,\n            },\n          },\n        ]}\n      />\n      <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل التمرين رقم ${imageExerciseObj._id}`,\n          onSave: async () => {\n            const result = await editImageExercise(editFormRef);\n            if (result) {\n              setImageExercises(\n                imageExercises.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: imageExerciseObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"عنوان التمرين\",\n            props: {\n              type: \"text\",\n              value: imageExerciseObj.title,\n              name: \"title\",\n              placeholder: \"عنوان التمرين\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  title: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"select\",\n            label: \"القسم\",\n            props: {\n              value: imageExerciseObj?.categoryId?._id,\n              name: \"categoryId\",\n              onChange: (e) => setImageExerciseObj({ ...imageExerciseObj, categoryId: e.target.value }),\n            },\n            options: categories,\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي التمرين\",\n            props: {\n              type: \"text\",\n              value: imageExerciseObj.description,\n              name: \"description\",\n              placeholder: \"محتوي التمرين\",\n              required: true,\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  description: e.target.value,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصور\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              multiple: true,\n              placeholder: \"الصور\",\n              name: \"images\",\n              onChange: (e) =>\n                setImageExerciseObj({\n                  ...imageExerciseObj,\n                  images: e.target.files,\n                }),\n            },\n          },\n          {\n            tag: \"input\",\n            props: {\n              name: \"type\",\n              type: \"hidden\",\n              value: 1,\n            },\n          },\n        ]}\n      />\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>التمارين المنزليه</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"الصور\",\n              \"العنوان\",\n              \"القسم\",\n              \"محتوي التمرينة\",\n              \"تاريخ الإضافة\",\n            ]}\n            data={\n              imageExercises &&\n              imageExercises.map((u) => [\n                u._id,\n                { type: \"slider\", images: u.images },\n                u.title,\n                u.categoryId?.name,\n                u.description,\n                u.createDate,\n              ])\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default HomeExercises;\n","C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\screens\\HomeExercices\\hooks\\index.js",[],"C:\\Users\\user\\Desktop\\khamsat\\Nouveau dossier\\tamreny_project\\tamreny\\client\\src\\components\\Table\\QuestionTable.js",["388","389","390","391","392","393","394","395","396"],"import { useEffect, useState } from \"react\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport SwiperCore, { Pagination, A11y } from \"swiper\";\r\nimport { url } from \"../../config\";\r\n//Style\r\nimport \"./style.scss\";\r\nimport \"swiper/swiper.scss\";\r\nimport \"swiper/components/navigation/navigation.scss\";\r\nimport \"swiper/components/pagination/pagination.scss\";\r\nimport \"swiper/components/scrollbar/scrollbar.scss\";\r\n\r\n//Assets\r\n//@ts-ignore\r\nimport TrashIcon from \"../../assets/img/trash.svg\";\r\n\r\nSwiperCore.use([Pagination, A11y]);\r\n\r\nconst QuestionTable = ({ headers, data, actions }) => {\r\n  return (\r\n    <div className=\"table-container\">\r\n      <div className=\"table\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              {headers && headers.map((head, i) => <th key={i}>{head}</th>)}\r\n              {actions && <th>الإجراء</th>}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data &&\r\n              data.length !== 0 &&\r\n              data.map((inputs, i) => (\r\n                <tr key={i}>\r\n                  {inputs &&\r\n                    inputs.map((input) => (\r\n                      <td>\r\n                        {input && input.type == \"img\" ? (\r\n                          <img src={input.src} className=\"main-img\" />\r\n                        ) : input && input.type == \"slider\" ? (\r\n                          <Swiper\r\n                            spaceBetween={0}\r\n                            slidesPerView={1}\r\n                            pagination={{ clickable: true }}\r\n                          >\r\n                            {input.images.map((img) => (\r\n                              <SwiperSlide style={{ width: 160 }}>\r\n                                <img src={img} className=\"slider-img\" />\r\n                              </SwiperSlide>\r\n                            ))}\r\n                          </Swiper>\r\n                        ) : input && input.type == \"location\" ? (\r\n                          <button\r\n                            className=\"maps-btn\"\r\n                            onClick={input.onClick && input.onClick}\r\n                          >\r\n                            عرض الخريطة\r\n                          </button>\r\n                        ) : input && input.type == \"video\" ? (\r\n                          <iframe\r\n                            className=\"video-frame\"\r\n                            src={`\r\n                              ${url}/play-youtube?videoId=${input.videoId}`}\r\n                          ></iframe>\r\n                        ) : (\r\n                          input\r\n                        )}\r\n                      </td>\r\n                    ))}\r\n                  {actions && (\r\n                    <td className=\"action\">\r\n                      {actions.edit && (\r\n                        <button\r\n                          onClick={() => actions.edit(inputs[0])}\r\n                          className=\"btn-edit\"\r\n                        >\r\n                          الأجوبة\r\n                        </button>\r\n                      )}\r\n                      {actions.delete && (\r\n                        <img\r\n                          onClick={() => actions.delete(inputs[0])}\r\n                          src={TrashIcon}\r\n                          alt=\"حذف\"\r\n                          title=\"حذف\"\r\n                        />\r\n                      )}\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"pagination\" data-update-function=\"searchForUsers\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionTable;\r\n",{"ruleId":"397","replacedBy":"398"},{"ruleId":"399","replacedBy":"400"},{"ruleId":"401","severity":1,"message":"402","line":29,"column":3,"nodeType":"403","messageId":"404","endLine":29,"endColumn":25},{"ruleId":"401","severity":1,"message":"405","line":32,"column":3,"nodeType":"403","messageId":"404","endLine":32,"endColumn":7},{"ruleId":"401","severity":1,"message":"406","line":5,"column":22,"nodeType":"403","messageId":"404","endLine":5,"endColumn":42},{"ruleId":"401","severity":1,"message":"407","line":1,"column":10,"nodeType":"403","messageId":"404","endLine":1,"endColumn":19},{"ruleId":"401","severity":1,"message":"408","line":1,"column":21,"nodeType":"403","messageId":"404","endLine":1,"endColumn":29},{"ruleId":"409","severity":1,"message":"410","line":37,"column":46,"nodeType":"411","messageId":"412","endLine":37,"endColumn":48},{"ruleId":"413","severity":1,"message":"414","line":38,"column":27,"nodeType":"415","endLine":38,"endColumn":71},{"ruleId":"409","severity":1,"message":"410","line":39,"column":49,"nodeType":"411","messageId":"412","endLine":39,"endColumn":51},{"ruleId":"413","severity":1,"message":"414","line":47,"column":33,"nodeType":"415","endLine":47,"endColumn":73},{"ruleId":"409","severity":1,"message":"410","line":51,"column":49,"nodeType":"411","messageId":"412","endLine":51,"endColumn":51},{"ruleId":"409","severity":1,"message":"410","line":58,"column":49,"nodeType":"411","messageId":"412","endLine":58,"endColumn":51},{"ruleId":"416","severity":1,"message":"417","line":59,"column":27,"nodeType":"415","endLine":63,"endColumn":28},{"ruleId":"418","severity":1,"message":"419","line":11,"column":6,"nodeType":"420","endLine":11,"endColumn":8,"suggestions":"421"},{"ruleId":"418","severity":1,"message":"422","line":28,"column":6,"nodeType":"420","endLine":28,"endColumn":8,"suggestions":"423"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"425","line":34,"column":6,"nodeType":"420","endLine":34,"endColumn":8,"suggestions":"426"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"427","line":43,"column":6,"nodeType":"420","endLine":43,"endColumn":8,"suggestions":"428"},{"ruleId":"418","severity":1,"message":"429","line":30,"column":6,"nodeType":"420","endLine":30,"endColumn":8,"suggestions":"430"},{"ruleId":"401","severity":1,"message":"431","line":32,"column":9,"nodeType":"403","messageId":"404","endLine":32,"endColumn":25},{"ruleId":"409","severity":1,"message":"432","line":42,"column":23,"nodeType":"411","messageId":"412","endLine":42,"endColumn":25},{"ruleId":"409","severity":1,"message":"410","line":100,"column":49,"nodeType":"411","messageId":"412","endLine":100,"endColumn":51},{"ruleId":"409","severity":1,"message":"410","line":102,"column":46,"nodeType":"411","messageId":"412","endLine":102,"endColumn":48},{"ruleId":"409","severity":1,"message":"410","line":108,"column":41,"nodeType":"411","messageId":"412","endLine":108,"endColumn":43},{"ruleId":"409","severity":1,"message":"432","line":108,"column":70,"nodeType":"411","messageId":"412","endLine":108,"endColumn":72},{"ruleId":"413","severity":1,"message":"414","line":117,"column":33,"nodeType":"415","endLine":117,"endColumn":81},{"ruleId":"409","severity":1,"message":"410","line":152,"column":33,"nodeType":"411","messageId":"412","endLine":152,"endColumn":35},{"ruleId":"413","severity":1,"message":"414","line":185,"column":25,"nodeType":"415","endLine":190,"endColumn":27},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"433","line":50,"column":6,"nodeType":"420","endLine":50,"endColumn":8,"suggestions":"434"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"401","severity":1,"message":"435","line":17,"column":5,"nodeType":"403","messageId":"404","endLine":17,"endColumn":18},{"ruleId":"401","severity":1,"message":"436","line":21,"column":10,"nodeType":"403","messageId":"404","endLine":21,"endColumn":20},{"ruleId":"401","severity":1,"message":"437","line":21,"column":22,"nodeType":"403","messageId":"404","endLine":21,"endColumn":35},{"ruleId":"418","severity":1,"message":"438","line":50,"column":6,"nodeType":"420","endLine":50,"endColumn":8,"suggestions":"439"},{"ruleId":"401","severity":1,"message":"408","line":1,"column":10,"nodeType":"403","messageId":"404","endLine":1,"endColumn":18},{"ruleId":"413","severity":1,"message":"414","line":36,"column":13,"nodeType":"415","endLine":36,"endColumn":80},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"440","line":51,"column":6,"nodeType":"420","endLine":51,"endColumn":8,"suggestions":"441"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"442","line":45,"column":6,"nodeType":"420","endLine":45,"endColumn":8,"suggestions":"443"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"442","line":45,"column":6,"nodeType":"420","endLine":45,"endColumn":8,"suggestions":"444"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"442","line":45,"column":6,"nodeType":"420","endLine":45,"endColumn":8,"suggestions":"445"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"401","severity":1,"message":"446","line":3,"column":37,"nodeType":"403","messageId":"404","endLine":3,"endColumn":46},{"ruleId":"401","severity":1,"message":"447","line":12,"column":22,"nodeType":"403","messageId":"404","endLine":12,"endColumn":33},{"ruleId":"401","severity":1,"message":"448","line":12,"column":35,"nodeType":"403","messageId":"404","endLine":12,"endColumn":43},{"ruleId":"401","severity":1,"message":"449","line":15,"column":25,"nodeType":"403","messageId":"404","endLine":15,"endColumn":41},{"ruleId":"401","severity":1,"message":"450","line":17,"column":10,"nodeType":"403","messageId":"404","endLine":17,"endColumn":26},{"ruleId":"401","severity":1,"message":"451","line":27,"column":9,"nodeType":"403","messageId":"404","endLine":27,"endColumn":19},{"ruleId":"418","severity":1,"message":"452","line":38,"column":6,"nodeType":"420","endLine":38,"endColumn":8,"suggestions":"453"},{"ruleId":"409","severity":1,"message":"410","line":222,"column":28,"nodeType":"411","messageId":"412","endLine":222,"endColumn":30},{"ruleId":"409","severity":1,"message":"410","line":224,"column":32,"nodeType":"411","messageId":"412","endLine":224,"endColumn":34},{"ruleId":"409","severity":1,"message":"410","line":226,"column":32,"nodeType":"411","messageId":"412","endLine":226,"endColumn":34},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"454","line":42,"column":6,"nodeType":"420","endLine":42,"endColumn":8,"suggestions":"455"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"456","line":43,"column":6,"nodeType":"420","endLine":43,"endColumn":8,"suggestions":"457"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"458","line":50,"column":6,"nodeType":"420","endLine":50,"endColumn":8,"suggestions":"459"},{"ruleId":"401","severity":1,"message":"424","line":2,"column":26,"nodeType":"403","messageId":"404","endLine":2,"endColumn":35},{"ruleId":"418","severity":1,"message":"460","line":41,"column":6,"nodeType":"420","endLine":41,"endColumn":8,"suggestions":"461"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"462","line":42,"column":6,"nodeType":"420","endLine":42,"endColumn":8,"suggestions":"463"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"464","line":44,"column":6,"nodeType":"420","endLine":44,"endColumn":8,"suggestions":"465"},{"ruleId":"401","severity":1,"message":"466","line":52,"column":9,"nodeType":"403","messageId":"404","endLine":52,"endColumn":13},{"ruleId":"401","severity":1,"message":"467","line":53,"column":9,"nodeType":"403","messageId":"404","endLine":53,"endColumn":13},{"ruleId":"401","severity":1,"message":"468","line":54,"column":9,"nodeType":"403","messageId":"404","endLine":54,"endColumn":14},{"ruleId":"401","severity":1,"message":"469","line":57,"column":9,"nodeType":"403","messageId":"404","endLine":57,"endColumn":15},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"470","line":45,"column":6,"nodeType":"420","endLine":45,"endColumn":8,"suggestions":"471"},{"ruleId":"401","severity":1,"message":"472","line":51,"column":9,"nodeType":"403","messageId":"404","endLine":51,"endColumn":20},{"ruleId":"401","severity":1,"message":"473","line":52,"column":9,"nodeType":"403","messageId":"404","endLine":52,"endColumn":20},{"ruleId":"401","severity":1,"message":"474","line":53,"column":9,"nodeType":"403","messageId":"404","endLine":53,"endColumn":18},{"ruleId":"401","severity":1,"message":"469","line":54,"column":9,"nodeType":"403","messageId":"404","endLine":54,"endColumn":15},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"475","line":48,"column":6,"nodeType":"420","endLine":48,"endColumn":8,"suggestions":"476"},{"ruleId":"401","severity":1,"message":"477","line":3,"column":10,"nodeType":"403","messageId":"404","endLine":3,"endColumn":15},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"401","severity":1,"message":"446","line":3,"column":37,"nodeType":"403","messageId":"404","endLine":3,"endColumn":46},{"ruleId":"401","severity":1,"message":"478","line":14,"column":5,"nodeType":"403","messageId":"404","endLine":14,"endColumn":23},{"ruleId":"401","severity":1,"message":"479","line":16,"column":5,"nodeType":"403","messageId":"404","endLine":16,"endColumn":21},{"ruleId":"401","severity":1,"message":"480","line":21,"column":10,"nodeType":"403","messageId":"404","endLine":21,"endColumn":24},{"ruleId":"401","severity":1,"message":"450","line":22,"column":10,"nodeType":"403","messageId":"404","endLine":22,"endColumn":26},{"ruleId":"401","severity":1,"message":"481","line":33,"column":9,"nodeType":"403","messageId":"404","endLine":33,"endColumn":20},{"ruleId":"418","severity":1,"message":"482","line":43,"column":6,"nodeType":"420","endLine":43,"endColumn":8,"suggestions":"483"},{"ruleId":"401","severity":1,"message":"484","line":56,"column":9,"nodeType":"403","messageId":"404","endLine":56,"endColumn":20},{"ruleId":"401","severity":1,"message":"485","line":61,"column":9,"nodeType":"403","messageId":"404","endLine":61,"endColumn":22},{"ruleId":"401","severity":1,"message":"486","line":1,"column":31,"nodeType":"403","messageId":"404","endLine":1,"endColumn":37},{"ruleId":"401","severity":1,"message":"487","line":3,"column":17,"nodeType":"403","messageId":"404","endLine":3,"endColumn":24},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"488","line":53,"column":6,"nodeType":"420","endLine":53,"endColumn":8,"suggestions":"489"},{"ruleId":"401","severity":1,"message":"490","line":73,"column":11,"nodeType":"403","messageId":"404","endLine":73,"endColumn":12},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"442","line":45,"column":6,"nodeType":"420","endLine":45,"endColumn":8,"suggestions":"491"},{"ruleId":"401","severity":1,"message":"424","line":3,"column":26,"nodeType":"403","messageId":"404","endLine":3,"endColumn":35},{"ruleId":"418","severity":1,"message":"433","line":50,"column":6,"nodeType":"420","endLine":50,"endColumn":8,"suggestions":"492"},{"ruleId":"401","severity":1,"message":"407","line":1,"column":10,"nodeType":"403","messageId":"404","endLine":1,"endColumn":19},{"ruleId":"401","severity":1,"message":"408","line":1,"column":21,"nodeType":"403","messageId":"404","endLine":1,"endColumn":29},{"ruleId":"409","severity":1,"message":"410","line":37,"column":46,"nodeType":"411","messageId":"412","endLine":37,"endColumn":48},{"ruleId":"413","severity":1,"message":"414","line":38,"column":27,"nodeType":"415","endLine":38,"endColumn":71},{"ruleId":"409","severity":1,"message":"410","line":39,"column":49,"nodeType":"411","messageId":"412","endLine":39,"endColumn":51},{"ruleId":"413","severity":1,"message":"414","line":47,"column":33,"nodeType":"415","endLine":47,"endColumn":73},{"ruleId":"409","severity":1,"message":"410","line":51,"column":49,"nodeType":"411","messageId":"412","endLine":51,"endColumn":51},{"ruleId":"409","severity":1,"message":"410","line":58,"column":49,"nodeType":"411","messageId":"412","endLine":58,"endColumn":51},{"ruleId":"416","severity":1,"message":"417","line":59,"column":27,"nodeType":"415","endLine":63,"endColumn":28},"no-native-reassign",["493"],"no-negated-in-lhs",["494"],"no-unused-vars","'VideoExercisesCategory' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","'setIsNotifierVisible' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'containerHandler'. Either include it or remove the dependency array.","ArrayExpression",["495"],"React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.",["496"],"'SearchBox' is defined but never used.","React Hook useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array.",["497"],"React Hook useEffect has a missing dependency: 'getArticles'. Either include it or remove the dependency array.",["498"],"React Hook useEffect has missing dependencies: 'bufferToImage' and 'options.images'. Either include them or remove the dependency array.",["499"],"'containerHandler' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'getCategories' and 'getImageExercises'. Either include them or remove the dependency array.",["500"],"'getCategories' is assigned a value but never used.","'categories' is assigned a value but never used.","'setCategories' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getVideoExercises'. Either include it or remove the dependency array.",["501"],"React Hook useEffect has missing dependencies: 'getCategories' and 'getProducts'. Either include them or remove the dependency array.",["502"],"React Hook useEffect has a missing dependency: 'getProducts'. Either include it or remove the dependency array.",["503"],["504"],["505"],"'DeleteBox' is defined but never used.","'deleteOrder' is assigned a value but never used.","'addOrder' is assigned a value but never used.","'setAddBoxVisible' is assigned a value but never used.","'deleteBoxVisible' is assigned a value but never used.","'addFormRef' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getOrders'. Either include it or remove the dependency array.",["506"],"React Hook useEffect has a missing dependency: 'getHalls'. Either include it or remove the dependency array.",["507"],"React Hook useEffect has a missing dependency: 'getPaymentMethods'. Either include it or remove the dependency array.",["508"],"React Hook useEffect has missing dependencies: 'getCategories' and 'getProteins'. Either include them or remove the dependency array.",["509"],"React Hook useEffect has a missing dependency: 'getAdvertisement'. Either include it or remove the dependency array.",["510"],"React Hook useEffect has a missing dependency: 'getProteins'. Either include it or remove the dependency array.",["511"],"React Hook useEffect has a missing dependency: 'getNutritionMethods'. Either include it or remove the dependency array.",["512"],"'name' is assigned a value but never used.","'city' is assigned a value but never used.","'brief' is assigned a value but never used.","'images' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDiets'. Either include it or remove the dependency array.",["513"],"'ingredients' is assigned a value but never used.","'preparation' is assigned a value but never used.","'foodValue' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getBarcodes'. Either include it or remove the dependency array.",["514"],"'Table' is defined but never used.","'deleteNotification' is assigned a value but never used.","'editNotification' is assigned a value but never used.","'editBoxVisible' is assigned a value but never used.","'editFormRef' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getNotification'. Either include it or remove the dependency array.",["515"],"'onClickEdit' is assigned a value but never used.","'onClickDelete' is assigned a value but never used.","'useRef' is defined but never used.","'DataBox' is defined but never used.","React Hook useEffect has a missing dependency: 'getQuestions'. Either include it or remove the dependency array.",["516"],"'a' is assigned a value but never used.",["517"],["518"],"no-global-assign","no-unsafe-negation",{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"535","fix":"537"},{"desc":"535","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},{"desc":"547","fix":"548"},{"desc":"549","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"555","fix":"556"},{"desc":"557","fix":"558"},{"desc":"559","fix":"560"},{"desc":"535","fix":"561"},{"desc":"529","fix":"562"},"Update the dependencies array to be: [containerHandler]",{"range":"563","text":"564"},"Update the dependencies array to be: [getStats]",{"range":"565","text":"566"},"Update the dependencies array to be: [getUsers]",{"range":"567","text":"568"},"Update the dependencies array to be: [getArticles]",{"range":"569","text":"570"},"Update the dependencies array to be: [bufferToImage, options.images]",{"range":"571","text":"572"},"Update the dependencies array to be: [getCategories, getImageExercises]",{"range":"573","text":"574"},"Update the dependencies array to be: [getVideoExercises]",{"range":"575","text":"576"},"Update the dependencies array to be: [getCategories, getProducts]",{"range":"577","text":"578"},"Update the dependencies array to be: [getProducts]",{"range":"579","text":"580"},{"range":"581","text":"580"},{"range":"582","text":"580"},"Update the dependencies array to be: [getOrders]",{"range":"583","text":"584"},"Update the dependencies array to be: [getHalls]",{"range":"585","text":"586"},"Update the dependencies array to be: [getPaymentMethods]",{"range":"587","text":"588"},"Update the dependencies array to be: [getCategories, getProteins]",{"range":"589","text":"590"},"Update the dependencies array to be: [getAdvertisement]",{"range":"591","text":"592"},"Update the dependencies array to be: [getProteins]",{"range":"593","text":"594"},"Update the dependencies array to be: [getNutritionMethods]",{"range":"595","text":"596"},"Update the dependencies array to be: [getDiets]",{"range":"597","text":"598"},"Update the dependencies array to be: [getBarcodes]",{"range":"599","text":"600"},"Update the dependencies array to be: [getNotification]",{"range":"601","text":"602"},"Update the dependencies array to be: [getQuestions]",{"range":"603","text":"604"},{"range":"605","text":"580"},{"range":"606","text":"574"},[263,265],"[containerHandler]",[547,549],"[getStats]",[844,846],"[getUsers]",[988,990],"[getArticles]",[960,962],"[bufferToImage, options.images]",[1332,1334],"[getCategories, getImageExercises]",[1344,1346],"[getVideoExercises]",[1292,1294],"[getCategories, getProducts]",[1033,1035],"[getProducts]",[1028,1030],[1028,1030],[943,945],"[getOrders]",[1085,1087],"[getHalls]",[1069,1071],"[getPaymentMethods]",[1250,1252],"[getCategories, getProteins]",[1018,1020],"[getAdvertisement]",[971,973],"[getProteins]",[1091,1093],"[getNutritionMethods]",[1031,1033],"[getDiets]",[1053,1055],"[getBarcodes]",[1046,1048],"[getNotification]",[1252,1254],"[getQuestions]",[1033,1035],[1331,1333]]