{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useNotifierContext } from \"../../../providers\";\n\nconst useNutritionMethodsHook = () => {\n  _s();\n\n  const {\n    setNotifiers\n  } = useNotifierContext();\n\n  const getNutritionMethods = async () => {\n    try {\n      let response = await axios.post(\"/api/nutritions/get\");\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({\n          errors: data.errors\n        });\n        return false;\n      }\n\n      return data.nutritions;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n  /******************************************************/\n\n\n  const deleteNutritionMethod = async _id => {\n    try {\n      let response = await axios.post(\"/api/nutritions/delete\", {\n        _id\n      });\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({\n          errors: data.errors\n        });\n        return false;\n      }\n\n      setNotifiers({\n        success: data.messages\n      });\n      return true;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n  /******************************************************/\n\n\n  const addNutritionMethod = async formRef => {\n    try {\n      let nutritionMethodData = new FormData(formRef.current);\n      console.log(formRef.current);\n      let response = await axios.post(\"/api/nutritions/add\", nutritionMethodData);\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({\n          errors: data.errors\n        });\n        return false;\n      }\n\n      setNotifiers({\n        success: data.messages\n      });\n      return data.nutrition;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n  /******************************************************/\n\n\n  const editNutritionMethod = async formRef => {\n    try {\n      let nutritionMethodData = new FormData(formRef.current);\n      let response = await axios.post(\"/api/nutritions/edit\", nutritionMethodData);\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({\n          errors: data.errors\n        });\n        return false;\n      }\n\n      setNotifiers({\n        success: data.messages\n      });\n      return data.nutrition;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return {\n    getNutritionMethods,\n    deleteNutritionMethod,\n    addNutritionMethod,\n    editNutritionMethod\n  };\n};\n\n_s(useNutritionMethodsHook, \"Qrog+wafX6oaOESQjnohXpTgwg4=\", false, function () {\n  return [useNotifierContext];\n});\n\nexport default useNutritionMethodsHook;","map":{"version":3,"sources":["C:/Users/user/Desktop/khamsat/Nouveau dossier/tamreny_project/tamreny/client/src/screens/Nutritions/hooks/index.js"],"names":["axios","useNotifierContext","useNutritionMethodsHook","setNotifiers","getNutritionMethods","response","post","data","status","errors","nutritions","e","alert","message","deleteNutritionMethod","_id","success","messages","addNutritionMethod","formRef","nutritionMethodData","FormData","current","console","log","nutrition","editNutritionMethod"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useNotifierContext } from \"../../../providers\";\n\nconst useNutritionMethodsHook = () => {\n  const { setNotifiers } = useNotifierContext();\n\n  const getNutritionMethods = async () => {\n    try {\n      let response = await axios.post(\"/api/nutritions/get\");\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      return data.nutritions;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  /******************************************************/\n\n  const deleteNutritionMethod = async (_id) => {\n    try {\n      let response = await axios.post(\"/api/nutritions/delete\", { _id });\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return true;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  /******************************************************/\n\n  const addNutritionMethod = async (formRef) => {\n    try {\n      let nutritionMethodData = new FormData(formRef.current);\n\n      console.log(formRef.current)\n      let response = await axios.post(\n        \"/api/nutritions/add\",\n        nutritionMethodData\n      );\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return data.nutrition;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n  /******************************************************/\n\n  const editNutritionMethod = async (formRef) => {\n    try {\n      let nutritionMethodData = new FormData(formRef.current);\n\n      let response = await axios.post(\n        \"/api/nutritions/edit\",\n        nutritionMethodData\n      );\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return data.nutrition;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return {\n    getNutritionMethods,\n    deleteNutritionMethod,\n    addNutritionMethod,\n    editNutritionMethod,\n  };\n};\n\nexport default useNutritionMethodsHook;\n"]},"metadata":{},"sourceType":"module"}