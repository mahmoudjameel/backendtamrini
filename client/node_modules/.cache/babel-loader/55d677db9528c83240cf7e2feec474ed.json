{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\khamsat\\\\Nouveau dossier\\\\tamreny_project\\\\tamreny\\\\client\\\\src\\\\screens\\\\Notifications\\\\Notifications.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\"; //Hooks\n\nimport useNotificationsHook from \"./hooks/index\"; //Styles\n\nimport \"./style.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Notifications = () => {\n  _s();\n\n  const {\n    getNotification,\n    deleteNotification,\n    sendNotification,\n    editNotification\n  } = useNotificationsHook();\n  const [notifications, setNotifications] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n  const [notificationObj, setNotificationObj] = useState({\n    _id: 0,\n    title: \"\",\n    body: \"\",\n    //   data: \"\",\n    createDate: \"\"\n  });\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n  useEffect(() => {\n    (async () => {\n      const result = await getArticles();\n\n      if (result) {\n        setNotifications(result);\n      }\n    })();\n  }, []);\n  useEffect(() => {\n    if (addBoxVisible) setNotificationObj({\n      _id: 0,\n      title: \"\",\n      body: \"\",\n      //   data: \"\",\n      createDate: \"\"\n    });\n  }, [addBoxVisible]);\n\n  const onClickEdit = _id => {\n    const notification = notifications.find(u => u._id === _id);\n    setNotificationObj(notification);\n    setEditBoxVisible(true);\n  };\n\n  const onClickDelete = _id => {\n    setNotificationObj(notifications.find(u => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\\u0644\\u0648\\u062D\\u0629 \\u0627\\u0644\\u062A\\u062D\\u0643\\u0645 / \\u0625\\u0634\\u0639\\u0627\\u0631\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataBox, {\n      visible: addBoxVisible,\n      setVisible: setAddBoxVisible,\n      options: {\n        title: \"  إرسال إشعار\",\n        onSave: async () => {\n          const not = await sendNotification(addFormRef);\n\n          if (not) {\n            setNotifications([...notifications, not]);\n            setAddBoxVisible(false);\n          }\n        },\n        btnSave: \"إرسال إشعار\",\n        formRef: addFormRef\n      },\n      inputs: [{\n        tag: \"input\",\n        label: \"عنوان إشعار\",\n        props: {\n          type: \"text\",\n          name: \"title\",\n          maxLength: 100,\n          placeholder: \"عنوان إشعار\",\n          required: true,\n          onChange: e => setNotificationObj({ ...notificationObj,\n            title: e.target.value\n          })\n        }\n      }, {\n        tag: \"textarea\",\n        label: \"محتوي إشعار\",\n        props: {\n          type: \"text\",\n          name: \"body\",\n          placeholder: \"محتوي إشعار\",\n          required: true,\n          onChange: e => setNotificationObj({ ...notificationObj,\n            body: e.target.value\n          })\n        }\n      } // {\n      //   tag: \"textarea\",\n      //   label: \"محتوي إشعار\",\n      //   props: {\n      //     type: \"text\",\n      //     name: \"data\",\n      //     placeholder: \"الداتا \",\n      //     required: true,\n      //     onChange: (e) =>\n      //       setNotificationObj({ ...notificationObj, data: e.target.value }),\n      //   },\n      // },\n      ]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-position\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0644\\u0648\\u062D\\u0629 \\u0627\\u0644\\u062A\\u062D\\u0643\\u0645\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"\\u0627\\u0644\\u0645\\u0642\\u0627\\u0644\\u0627\\u062A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-new\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-add-new\",\n            onClick: () => setAddBoxVisible(true),\n            children: \"\\u0623\\u0636\\u0641 \\u062C\\u062F\\u064A\\u062F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Notifications, \"+N8evdLHbiMEd4tJE/t3fmvX0dQ=\", false, function () {\n  return [useNotificationsHook];\n});\n\n_c = Notifications;\nexport default Notifications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"sources":["C:/Users/user/Desktop/khamsat/Nouveau dossier/tamreny_project/tamreny/client/src/screens/Notifications/Notifications.jsx"],"names":["useState","useEffect","useRef","Helmet","Table","DataBox","SearchBox","DeleteBox","useNotificationsHook","Notifications","getNotification","deleteNotification","sendNotification","editNotification","notifications","setNotifications","addBoxVisible","setAddBoxVisible","editBoxVisible","setEditBoxVisible","deleteBoxVisible","setDeleteBoxVisible","notificationObj","setNotificationObj","_id","title","body","createDate","addFormRef","editFormRef","result","getArticles","onClickEdit","notification","find","u","onClickDelete","onSave","not","btnSave","formRef","tag","label","props","type","name","maxLength","placeholder","required","onChange","e","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Table, DataBox, SearchBox, DeleteBox } from \"../../components\";\n\n//Hooks\nimport useNotificationsHook from \"./hooks/index\";\n\n//Styles\nimport \"./style.scss\";\n\nconst Notifications = () => {\n  const {\n    getNotification,\n    deleteNotification,\n    sendNotification,\n    editNotification,\n  } = useNotificationsHook();\n\n  const [notifications, setNotifications] = useState([]);\n  const [addBoxVisible, setAddBoxVisible] = useState(false);\n  const [editBoxVisible, setEditBoxVisible] = useState(false);\n  const [deleteBoxVisible, setDeleteBoxVisible] = useState(false);\n\n  const [notificationObj, setNotificationObj] = useState({\n    _id: 0,\n    title: \"\",\n    body: \"\",\n //   data: \"\",\n    createDate: \"\",\n  });\n\n  const addFormRef = useRef(null);\n  const editFormRef = useRef(null);\n\n  useEffect(() => {\n    (async () => {\n      const result = await getArticles();\n\n      if (result) {\n        setNotifications(result);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (addBoxVisible)\n      setNotificationObj({\n        _id: 0,\n        title: \"\",\n        body: \"\",\n     //   data: \"\",\n        createDate: \"\",\n      });\n  }, [addBoxVisible]);\n\n  const onClickEdit = (_id) => {\n    const notification = notifications.find((u) => u._id === _id);\n    setNotificationObj(notification);\n    setEditBoxVisible(true);\n  };\n  const onClickDelete = (_id) => {\n    setNotificationObj(notifications.find((u) => u._id === _id));\n    setDeleteBoxVisible(true);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>لوحة التحكم / إشعار</title>\n      </Helmet>\n      {/* <DeleteBox\n        visible={deleteBoxVisible}\n        setVisible={setDeleteBoxVisible}\n        title={`حذف إشعار رقم ${notificationObj._id}`}\n        onDelete={async () => {\n          if (await deleteNotificatio(notificationObj._id)) {\n            setNotifications(notifications.filter((u) => u._id !== notificationObj._id));\n            setDeleteBoxVisible(false);\n          }\n        }}\n      /> */}\n      <DataBox\n        visible={addBoxVisible}\n        setVisible={setAddBoxVisible}\n        options={{\n          title: \"  إرسال إشعار\",\n          onSave: async () => {\n            const not = await sendNotification(addFormRef);\n            if (not) {\n              setNotifications([...notifications, not]);\n              setAddBoxVisible(false);\n            }\n          },\n          btnSave: \"إرسال إشعار\",\n          formRef: addFormRef,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            label: \"عنوان إشعار\",\n\n            props: {\n              type: \"text\",\n              name: \"title\",\n              maxLength: 100,\n              placeholder: \"عنوان إشعار\",\n              required: true,\n              onChange: (e) =>\n                setNotificationObj({ ...notificationObj, title: e.target.value }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي إشعار\",\n            props: {\n              type: \"text\",\n              name: \"body\",\n              placeholder: \"محتوي إشعار\",\n              required: true,\n\n              onChange: (e) =>\n                setNotificationObj({ ...notificationObj, body: e.target.value }),\n            },\n          },\n          // {\n          //   tag: \"textarea\",\n          //   label: \"محتوي إشعار\",\n          //   props: {\n          //     type: \"text\",\n          //     name: \"data\",\n          //     placeholder: \"الداتا \",\n          //     required: true,\n\n          //     onChange: (e) =>\n          //       setNotificationObj({ ...notificationObj, data: e.target.value }),\n          //   },\n          // },\n\n        ]}\n      />\n      {/* <DataBox\n        visible={editBoxVisible}\n        setVisible={setEditBoxVisible}\n        options={{\n          title: `تعديل المقال رقم ${notificationObj._id}`,\n          onSave: async () => {\n            const result = await editArticle(editFormRef);\n            if (result) {\n              setNotifications(\n                notifications.map((u) => (u._id === result._id ? result : u))\n              );\n              setEditBoxVisible(false);\n            }\n          },\n          saveBtn: \"تعديل\",\n          formRef: editFormRef,\n          images: notificationObj.mainImage,\n        }}\n        inputs={[\n          {\n            tag: \"input\",\n            props: {\n              type: \"hidden\",\n              value: notificationObj._id,\n              name: \"_id\",\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"عنوان المقال\",\n            props: {\n              type: \"text\",\n              value: notificationObj.title,\n              name: \"title\",\n              placeholder: \"عنوان المقال\",\n              required: true,\n              maxLength: 100,\n              onChange: (e) =>\n                setNotificationObj({ ...notificationObj, title: e.target.value }),\n            },\n          },\n          {\n            tag: \"textarea\",\n            label: \"محتوي المقال\",\n            props: {\n              type: \"text\",\n              value: notificationObj.content,\n              name: \"content\",\n              placeholder: \"محتوي المقال\",\n              required: true,\n              onChange: (e) =>\n                setNotificationObj({ ...notificationObj, content: e.target.value }),\n            },\n          },\n          {\n            tag: \"input\",\n            label: \"الصورة المصغرة\",\n            props: {\n              type: \"file\",\n              accept: \".jpg, .png, .jpeg\",\n              placeholder: \"الصورة المصغرة\",\n              name: \"mainImage\",\n              multiple: true,\n              onChange: (e) =>\n                setNotificationObj({\n                  ...notificationObj,\n                  mainImage: URL.createObjectURL(e.target.files[0]),\n                }),\n            },\n          },\n        ]}\n      /> */}\n\n      <div className=\"main-container\">\n        <div className=\"page-position\">\n          <h2>لوحة التحكم</h2>\n          <p>/</p>\n          <h6>المقالات</h6>\n        </div>\n        <div className=\"container\">\n          {/*<SearchBox />*/}\n          <div className=\"add-new\">\n            <button\n              className=\"btn-add-new\"\n              onClick={() => setAddBoxVisible(true)}\n            >\n              أضف جديد\n            </button>\n          </div>\n          {/* <Table\n            actions={{\n              edit: onClickEdit,\n              delete: onClickDelete,\n            }}\n            headers={[\n              \"#\",\n              \"الصورة المصغرة\",\n              \"عنوان المقال\",\n              \"محتوي المقال\",\n              \"تاريخ الإضافة\",\n            ]}\n            data={\n              notifications &&\n              notifications.map((u) => [\n                u._id,\n                { type: \"slider\", images: u.mainImage },\n                u.title,\n                u.content,\n                u.createDate,\n              ])\n            }\n          /> */}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Notifications;\n"]},"metadata":{},"sourceType":"module"}