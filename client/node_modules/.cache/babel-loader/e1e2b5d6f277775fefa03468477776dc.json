{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useNotifierContext } from \"../../../providers\";\n\nconst usePaymentMethodsHook = () => {\n  _s();\n\n  const {\n    setNotifiers\n  } = useNotifierContext();\n\n  const getPaymentMethods = async () => {\n    try {\n      let response = await axios.post(\"/api/paymentMethods/get\");\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({\n          errors: data.errors\n        });\n        return false;\n      }\n\n      return data.paymentMethods;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n  /******************************************************/\n\n\n  const deletePaymentMethod = async _id => {\n    try {\n      let response = await axios.post(\"/api/paymentMethods/delete\", {\n        _id\n      });\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({\n          errors: data.errors\n        });\n        return false;\n      }\n\n      setNotifiers({\n        success: data.messages\n      });\n      return true;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n  /******************************************************/\n\n\n  const addPaymentMethod = async formRef => {\n    try {\n      let paymentMethodData = new FormData(formRef.current);\n      console.log(formRef.current);\n      let response = await axios.post(\"/api/paymentMethods/add\", paymentMethodData);\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({\n          errors: data.errors\n        });\n        return false;\n      }\n\n      setNotifiers({\n        success: data.messages\n      });\n      return data.paymentMethod;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n  /******************************************************/\n\n\n  const editPaymentMethod = async formRef => {\n    try {\n      let paymentMethodData = new FormData(formRef.current);\n      let response = await axios.post(\"/api/paymentMethods/edit\", paymentMethodData);\n      let data = await response.data;\n      console.log(data);\n\n      if (!data.status) {\n        setNotifiers({\n          errors: data.errors\n        });\n        return false;\n      }\n\n      setNotifiers({\n        success: data.messages\n      });\n      return data.paymentMethod;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return {\n    getPaymentMethods,\n    deletePaymentMethod,\n    addPaymentMethod,\n    editPaymentMethod\n  };\n};\n\n_s(usePaymentMethodsHook, \"Qrog+wafX6oaOESQjnohXpTgwg4=\", false, function () {\n  return [useNotifierContext];\n});\n\nexport default usePaymentMethodsHook;","map":{"version":3,"sources":["C:/Users/user/Desktop/khamsat/Nouveau dossier/tamreny_project/tamreny/client/src/screens/PaymentMethods/hooks/index.js"],"names":["axios","useNotifierContext","usePaymentMethodsHook","setNotifiers","getPaymentMethods","response","post","data","status","errors","paymentMethods","e","alert","message","deletePaymentMethod","_id","success","messages","addPaymentMethod","formRef","paymentMethodData","FormData","current","console","log","paymentMethod","editPaymentMethod"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,QAAmC,oBAAnC;;AAEA,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAmBF,kBAAkB,EAA3C;;AAEA,QAAMG,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,yBAAX,CAArB;AACA,UAAIC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA1B;;AAEA,UAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AAChBL,QAAAA,YAAY,CAAC;AAAEM,UAAAA,MAAM,EAAEF,IAAI,CAACE;AAAf,SAAD,CAAZ;AACA,eAAO,KAAP;AACD;;AACD,aAAOF,IAAI,CAACG,cAAZ;AACD,KATD,CASE,OAAOC,CAAP,EAAU;AACVC,MAAAA,KAAK,CAACD,CAAC,CAACE,OAAH,CAAL;AACD;AACF,GAbD;AAeA;;;AAEA,QAAMC,mBAAmB,GAAG,MAAOC,GAAP,IAAe;AACzC,QAAI;AACF,UAAIV,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,4BAAX,EAAyC;AAAES,QAAAA;AAAF,OAAzC,CAArB;AACA,UAAIR,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA1B;;AAEA,UAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AAChBL,QAAAA,YAAY,CAAC;AAAEM,UAAAA,MAAM,EAAEF,IAAI,CAACE;AAAf,SAAD,CAAZ;AACA,eAAO,KAAP;AACD;;AACDN,MAAAA,YAAY,CAAC;AAAEa,QAAAA,OAAO,EAAET,IAAI,CAACU;AAAhB,OAAD,CAAZ;AACA,aAAO,IAAP;AACD,KAVD,CAUE,OAAON,CAAP,EAAU;AACVC,MAAAA,KAAK,CAACD,CAAC,CAACE,OAAH,CAAL;AACD;AACF,GAdD;AAgBA;;;AAEA,QAAMK,gBAAgB,GAAG,MAAOC,OAAP,IAAmB;AAC1C,QAAI;AACF,UAAIC,iBAAiB,GAAG,IAAIC,QAAJ,CAAaF,OAAO,CAACG,OAArB,CAAxB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACG,OAApB;AACA,UAAIjB,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnB,yBADmB,EAEnBc,iBAFmB,CAArB;AAIA,UAAIb,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA1B;;AAEA,UAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AAChBL,QAAAA,YAAY,CAAC;AAAEM,UAAAA,MAAM,EAAEF,IAAI,CAACE;AAAf,SAAD,CAAZ;AACA,eAAO,KAAP;AACD;;AACDN,MAAAA,YAAY,CAAC;AAAEa,QAAAA,OAAO,EAAET,IAAI,CAACU;AAAhB,OAAD,CAAZ;AACA,aAAOV,IAAI,CAACkB,aAAZ;AACD,KAhBD,CAgBE,OAAOd,CAAP,EAAU;AACVC,MAAAA,KAAK,CAACD,CAAC,CAACE,OAAH,CAAL;AACD;AACF,GApBD;AAqBA;;;AAEA,QAAMa,iBAAiB,GAAG,MAAOP,OAAP,IAAmB;AAC3C,QAAI;AACF,UAAIC,iBAAiB,GAAG,IAAIC,QAAJ,CAAaF,OAAO,CAACG,OAArB,CAAxB;AAEA,UAAIjB,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnB,0BADmB,EAEnBc,iBAFmB,CAArB;AAIA,UAAIb,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA1B;AAEAgB,MAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;;AACA,UAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AAChBL,QAAAA,YAAY,CAAC;AAAEM,UAAAA,MAAM,EAAEF,IAAI,CAACE;AAAf,SAAD,CAAZ;AACA,eAAO,KAAP;AACD;;AACDN,MAAAA,YAAY,CAAC;AAAEa,QAAAA,OAAO,EAAET,IAAI,CAACU;AAAhB,OAAD,CAAZ;AACA,aAAOV,IAAI,CAACkB,aAAZ;AACD,KAhBD,CAgBE,OAAOd,CAAP,EAAU;AACVC,MAAAA,KAAK,CAACD,CAAC,CAACE,OAAH,CAAL;AACD;AACF,GApBD;;AAsBA,SAAO;AACLT,IAAAA,iBADK;AAELU,IAAAA,mBAFK;AAGLI,IAAAA,gBAHK;AAILQ,IAAAA;AAJK,GAAP;AAMD,CAzFD;;GAAMxB,qB;UACqBD,kB;;;AA0F3B,eAAeC,qBAAf","sourcesContent":["import axios from \"axios\";\nimport { useNotifierContext } from \"../../../providers\";\n\nconst usePaymentMethodsHook = () => {\n  const { setNotifiers } = useNotifierContext();\n\n  const getPaymentMethods = async () => {\n    try {\n      let response = await axios.post(\"/api/paymentMethods/get\");\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      return data.paymentMethods;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  /******************************************************/\n\n  const deletePaymentMethod = async (_id) => {\n    try {\n      let response = await axios.post(\"/api/paymentMethods/delete\", { _id });\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return true;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  /******************************************************/\n\n  const addPaymentMethod = async (formRef) => {\n    try {\n      let paymentMethodData = new FormData(formRef.current);\n\n      console.log(formRef.current)\n      let response = await axios.post(\n        \"/api/paymentMethods/add\",\n        paymentMethodData\n      );\n      let data = await response.data;\n\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return data.paymentMethod;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n  /******************************************************/\n\n  const editPaymentMethod = async (formRef) => {\n    try {\n      let paymentMethodData = new FormData(formRef.current);\n\n      let response = await axios.post(\n        \"/api/paymentMethods/edit\",\n        paymentMethodData\n      );\n      let data = await response.data;\n\n      console.log(data);\n      if (!data.status) {\n        setNotifiers({ errors: data.errors });\n        return false;\n      }\n      setNotifiers({ success: data.messages });\n      return data.paymentMethod;\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  return {\n    getPaymentMethods,\n    deletePaymentMethod,\n    addPaymentMethod,\n    editPaymentMethod,\n  };\n};\n\nexport default usePaymentMethodsHook;\n"]},"metadata":{},"sourceType":"module"}